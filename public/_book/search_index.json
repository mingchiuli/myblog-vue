[["index.html", "关于本博客 前言 致谢", " 关于本博客 MingChiu Li 2022-01-04 前言 终于，做完了这个博客，喘口气。这个项目前后做了几乎两个月，中间做了很多前端的学习，后端的东西也算是做了一次全面的回顾，也可以说入门了。 本文档记录了这个博客里的一些代码。虽然不是微服务项目，数据库结构也比较简单，但是软件还是关联了不少的。后端框架是Spring boot，前端框架是Vue，用前后端分离的方式搭建。用到的其他软件有Redis，ElasticSearch，RabbitMQ，Nginx，mysql和Docker，除了http还用上了WebSocket做了一个合作写作和聊天的功能。 我用了两个 R 包编译这个文档，分别是 knitr (Xie 2015) 和 bookdown (Xie 2021)。以下是我的 R 进程信息： sessionInfo() ## R version 4.1.1 (2021-08-10) ## Platform: aarch64-apple-darwin20 (64-bit) ## Running under: macOS Monterey 12.1 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets ## [6] methods base ## ## loaded via a namespace (and not attached): ## [1] compiler_4.1.1 magrittr_2.0.1 ## [3] bookdown_0.23 tools_4.1.1 ## [5] htmltools_0.5.1.1 rstudioapi_0.13 ## [7] yaml_2.2.1 jquerylib_0.1.4 ## [9] stringi_1.7.3 rmarkdown_2.10 ## [11] knitr_1.33 stringr_1.4.0 ## [13] xfun_0.25 digest_0.6.28 ## [15] rlang_0.4.11 evaluate_0.14 致谢 感谢广州码客科技的吕丰泉，没有他在b站的两个指导视频，我不可能独立完成这个项目,还感谢up一定爱你哦和程序员青戈提供的一些教程。 MingChiu Li 于暨南园 参考文献 "],["author.html", "作者简介", " 作者简介 见主页吧。 "],["back.html", "第 1 章 后端 1.1 mysql 1.2 Shiro 1.3 controller 1.4 Redis 1.5 ElasticSearch 1.6 RabbitMQ 1.7 WebSocket 1.8 统一缓存和统一异常处理 1.9 其他部分 1.10 日志监控", " 第 1 章 后端 1.1 mysql CREATE TABLE `m_user` ( `id` bigint(20) NOT NULL AUTO_INCREMENT, `username` varchar(64) DEFAULT NULL, `avatar` varchar(255) DEFAULT NULL, `email` varchar(64) DEFAULT NULL, `password` varchar(64) DEFAULT NULL, `status` int(5) NOT NULL, `created` datetime DEFAULT NULL, `last_login` datetime DEFAULT NULL, `role` vachar(20) NOT NULL, PRIMARY KEY (`id`), KEY `UK_USERNAME` (`username`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8; CREATE TABLE `m_blog` ( `id` bigint(20) NOT NULL AUTO_INCREMENT, `user_id` bigint(20) NOT NULL, `title` varchar(255) NOT NULL, `description` varchar(255) NOT NULL, `content` longtext, `created` datetime NOT NULL ON UPDATE CURRENT_TIMESTAMP, `status` tinyint(4) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4; INSERT INTO `vueblog`.`m_user` (`id`, `username`, `avatar`, `email`, `password`, `status`, `created`, `last_login`) VALUES (&#39;1&#39;, &#39;markerhub&#39;, &#39;https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/5a9f48118166308daba8b6da7e466aab.jpg&#39;, NULL, &#39;96e79218965eb72c92a549dd5a330112&#39;, &#39;0&#39;, &#39;2020-04-20 10:44:01&#39;, NULL); user表里\\(username\\)字段还是加上unique为宜。 持久层用的框架是mybatis-plus。后来我发觉JDBCTemplate其实也可以，只是现在企业基本没有用它的。 package com.markerhub.entity; import com.baomidou.mybatisplus.annotation.TableField; import com.baomidou.mybatisplus.annotation.TableName; import com.baomidou.mybatisplus.annotation.IdType; import com.baomidou.mybatisplus.annotation.TableId; import java.time.LocalDateTime; import java.io.Serializable; import java.util.LinkedHashMap; import com.fasterxml.jackson.annotation.JsonFormat; import com.fasterxml.jackson.databind.annotation.JsonDeserialize; import com.fasterxml.jackson.databind.annotation.JsonSerialize; import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer; import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer; import lombok.Data; import lombok.EqualsAndHashCode; import javax.validation.constraints.NotBlank; /** * &lt;p&gt; * * &lt;/p&gt; * * @author Li MingChiu * @since 2021-10-27 */ @Data @EqualsAndHashCode(callSuper = false) @TableName(&quot;m_blog&quot;) public class Blog implements Serializable { private static final long serialVersionUID = 1032384974924024L; @TableId(value = &quot;id&quot;, type = IdType.AUTO) private Long id; //文章对应的用户名字 @TableField(exist = false) private String username; private Long userId; @NotBlank(message = &quot;标题不能为空&quot;) private String title; @NotBlank(message = &quot;摘要不能为空&quot;) private String description; @NotBlank(message = &quot;内容不能为空&quot;) private String content; @JsonDeserialize(using = LocalDateTimeDeserializer.class) @JsonSerialize(using = LocalDateTimeSerializer.class) @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;) private LocalDateTime created; private Integer status; @TableField(exist = false) private Integer readSum; @TableField(exist = false) private Integer readRecent; } package com.markerhub.entity; import com.baomidou.mybatisplus.annotation.TableField; import com.baomidou.mybatisplus.annotation.TableName; import com.baomidou.mybatisplus.annotation.IdType; import com.baomidou.mybatisplus.annotation.TableId; import java.time.LocalDateTime; import java.io.Serializable; import com.fasterxml.jackson.annotation.JsonFormat; import com.fasterxml.jackson.databind.annotation.JsonDeserialize; import com.fasterxml.jackson.databind.annotation.JsonSerialize; import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer; import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer; import lombok.Data; import lombok.EqualsAndHashCode; import javax.validation.constraints.Email; import javax.validation.constraints.NotBlank; /** * &lt;p&gt; * * &lt;/p&gt; * * @author Li MingChiu * @since 2021-10-27 */ @Data @EqualsAndHashCode(callSuper = false) @TableName(&quot;m_user&quot;) public class User implements Serializable { private static final long serialVersionUID = 18428328402842084L; @TableId(value = &quot;id&quot;, type = IdType.AUTO) private Long id; @NotBlank(message = &quot;昵称不能为空&quot;) private String username; private String avatar; @NotBlank(message = &quot;邮箱不能为空&quot;) @Email(message = &quot;邮箱格式不正确&quot;) private String email; private String password; private Integer status; @JsonDeserialize(using = LocalDateTimeDeserializer.class) @JsonSerialize(using = LocalDateTimeSerializer.class) @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;) private LocalDateTime created; @JsonDeserialize(using = LocalDateTimeDeserializer.class) @JsonSerialize(using = LocalDateTimeSerializer.class) @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;) private LocalDateTime lastLogin; private String role; @TableField(exist = false) private Integer monitor; } package com.markerhub.mapper; import com.markerhub.entity.Blog; import com.baomidou.mybatisplus.core.mapper.BaseMapper; import org.springframework.stereotype.Service; import java.util.List; /** * &lt;p&gt; * Mapper 接口 * &lt;/p&gt; * * @author Li MingChiu * @since 2021-10-27 */ public interface BlogMapper extends BaseMapper&lt;Blog&gt; { Integer getYearCount(Integer year); List&lt;Blog&gt; queryAllBlogs(); List&lt;Blog&gt; queryBlogs(String title); boolean recover(Blog blog); } package com.markerhub.mapper; import com.markerhub.entity.User; import com.baomidou.mybatisplus.core.mapper.BaseMapper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; /** * &lt;p&gt; * Mapper 接口 * &lt;/p&gt; * * @author Li MingChiu * @since 2021-10-27 */ public interface UserMapper extends BaseMapper&lt;User&gt; { } 这种里面什么都没写的就是mybatis-plus的特色，因为没有太复杂的操作，所以就只用mybatis-plus提供的API了。 package com.markerhub.service.impl; import com.markerhub.entity.Blog; import com.markerhub.mapper.BlogMapper; import com.markerhub.service.BlogService; import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import java.util.ArrayList; import java.util.List; /** * &lt;p&gt; * 服务实现类 * &lt;/p&gt; * * @author Li MingChiu * @since 2021-10-27 */ @Service public class BlogServiceImpl extends ServiceImpl&lt;BlogMapper, Blog&gt; implements BlogService { BlogMapper blogMapper; @Autowired private void setBlogMapper(BlogMapper blogMapper) { this.blogMapper = blogMapper; } @Override public Integer getYearCount(Integer year) { return blogMapper.getYearCount(year); } @Override public List&lt;Blog&gt; queryAllBlogs() { return blogMapper.queryAllBlogs(); } @Override public List&lt;Blog&gt; queryBlogs(String title) { return blogMapper.queryBlogs(title); } @Override public boolean recover(Blog blog) { return blogMapper.recover(blog); } } package com.markerhub.service.impl; import com.markerhub.entity.User; import com.markerhub.mapper.UserMapper; import com.markerhub.service.UserService; import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl; import org.springframework.stereotype.Service; /** * &lt;p&gt; * 服务实现类 * &lt;/p&gt; * * @author Li MingChiu * @since 2021-10-27 */ @Service public class UserServiceImpl extends ServiceImpl&lt;UserMapper, User&gt; implements UserService { } ServiceImpl提供了许多封装好的方法。 package com.markerhub.service; import com.markerhub.entity.User; import com.baomidou.mybatisplus.extension.service.IService; /** * &lt;p&gt; * 服务类 * &lt;/p&gt; * * @author Li MingChiu * @since 2021-10-27 */ public interface UserService extends IService&lt;User&gt; { } package com.markerhub.service; import com.markerhub.entity.Blog; import com.baomidou.mybatisplus.extension.service.IService; import java.util.ArrayList; import java.util.List; /** * &lt;p&gt; * 服务类 * &lt;/p&gt; * * @author Li MingChiu * @since 2021-10-27 */ public interface BlogService extends IService&lt;Blog&gt; { Integer getYearCount(Integer year); List&lt;Blog&gt; queryAllBlogs(); List&lt;Blog&gt; queryBlogs(String title); boolean recover(Blog blog); } &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt; &lt;mapper namespace=&quot;com.markerhub.mapper.BlogMapper&quot;&gt; &lt;insert id=&quot;recover&quot; parameterType=&quot;com.markerhub.entity.Blog&quot;&gt; insert into vueblog.m_blog(id, user_id, title, description, content, created, status) values (#{id}, #{userId}, #{title}, #{description}, #{content}, #{created}, #{status}) &lt;/insert&gt; &lt;select id=&quot;getYearCount&quot; resultType=&quot;java.lang.Integer&quot;&gt; select count(*) from vueblog.m_blog where DATE_FORMAT(created, &#39;%Y&#39;) = #{year} group by DATE_FORMAT(created, &#39;%Y&#39;); &lt;/select&gt; &lt;select id=&quot;queryAllBlogs&quot; resultType=&quot;com.markerhub.entity.Blog&quot;&gt; select mb.id, username, title, description, content, mb.created, mb.status from vueblog.m_blog mb left join vueblog.m_user mu on mb.user_id = mu.id order by created desc ; &lt;/select&gt; &lt;select id=&quot;queryBlogs&quot; resultType=&quot;com.markerhub.entity.Blog&quot;&gt; select mb.id, username, title, description, content, mb.created, mb.status from vueblog.m_blog mb left join vueblog.m_user mu on mb.user_id = mu.id where title like concat(&#39;%&#39;, #{title}, &#39;%&#39;) order by created desc; &lt;/select&gt; &lt;/mapper&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.markerhub.mapper.UserMapper&quot;&gt; &lt;/mapper&gt; 没有新的方法，mybatis的xml也什么都不写。 1.2 Shiro 因为是前后端分离的项目，所以权限用jwt去做。 package com.markerhub.config; import com.markerhub.shiro.AccountRealm; import com.markerhub.shiro.JwtFilter; import com.markerhub.util.JwtUtils; import org.apache.shiro.mgt.DefaultSessionStorageEvaluator; import org.apache.shiro.mgt.DefaultSubjectDAO; import org.apache.shiro.mgt.SecurityManager; import org.apache.shiro.spring.web.ShiroFilterFactoryBean; import org.apache.shiro.spring.web.config.DefaultShiroFilterChainDefinition; import org.apache.shiro.spring.web.config.ShiroFilterChainDefinition; import org.apache.shiro.web.mgt.DefaultWebSecurityManager; import org.crazycake.shiro.RedisCacheManager; import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer; import org.springframework.data.redis.serializer.StringRedisSerializer; import javax.servlet.Filter; import java.util.HashMap; import java.util.LinkedHashMap; import java.util.Map; @Configuration public class ShiroConfig { JwtFilter jwtFilter; @Autowired private void setJwtUtils(JwtFilter jwtFilter) { this.jwtFilter = jwtFilter; } @Bean public DefaultWebSecurityManager securityManager(AccountRealm accountRealm) { DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(accountRealm); /* * 关闭shiro自带的session，详情见文档 */ DefaultSubjectDAO subjectDAO = new DefaultSubjectDAO(); DefaultSessionStorageEvaluator defaultSessionStorageEvaluator = new DefaultSessionStorageEvaluator(); defaultSessionStorageEvaluator.setSessionStorageEnabled(false); subjectDAO.setSessionStorageEvaluator(defaultSessionStorageEvaluator); securityManager.setSubjectDAO(subjectDAO); return securityManager; } @Bean public ShiroFilterChainDefinition shiroFilterChainDefinition() { DefaultShiroFilterChainDefinition chainDefinition = new DefaultShiroFilterChainDefinition(); Map&lt;String, String&gt; filterMap = new LinkedHashMap&lt;&gt;(); filterMap.put(&quot;/**&quot;, &quot;jwt&quot;); // 主要通过注解方式校验权限 chainDefinition.addPathDefinitions(filterMap); return chainDefinition; } @Bean(&quot;shiroFilterFactoryBean&quot;) public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager, ShiroFilterChainDefinition shiroFilterChainDefinition) { ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean(); shiroFilter.setSecurityManager(securityManager); Map&lt;String, Filter&gt; filters = new HashMap&lt;&gt;(); filters.put(&quot;jwt&quot;, jwtFilter); shiroFilter.setFilters(filters); Map&lt;String, String&gt; filterMap = shiroFilterChainDefinition.getFilterChainMap(); shiroFilter.setFilterChainDefinitionMap(filterMap); return shiroFilter; } // 开启注解代理（默认好像已经开启，可以不要） // @Bean // public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager){ // AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor(); // authorizationAttributeSourceAdvisor.setSecurityManager(securityManager); // return authorizationAttributeSourceAdvisor; // } // //aop @Bean public DefaultAdvisorAutoProxyCreator getDefaultAdvisorAutoProxyCreator() { DefaultAdvisorAutoProxyCreator creator = new DefaultAdvisorAutoProxyCreator(); creator.setProxyTargetClass(true); return creator; } } package com.markerhub.util; import com.markerhub.shiro.AccountProfile; import org.apache.shiro.SecurityUtils; public class ShiroUtil { public static AccountProfile getProfile() { return (AccountProfile) SecurityUtils.getSubject().getPrincipal(); } } package com.markerhub.util; import io.jsonwebtoken.Claims; import io.jsonwebtoken.Jwts; import io.jsonwebtoken.SignatureAlgorithm; import lombok.Data; import lombok.extern.slf4j.Slf4j; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.stereotype.Component; import java.util.Date; /** * jwt工具类 */ @Slf4j @Data @Component @ConfigurationProperties(prefix = &quot;markerhub.jwt&quot;) public class JwtUtils { private String secret; private long expire; private String header; /** * 生成jwt token */ public String generateToken(long userId) { Date nowDate = new Date(); //过期时间 Date expireDate = new Date(nowDate.getTime() + expire * 1000); return Jwts.builder() .setHeaderParam(&quot;typ&quot;, &quot;JWT&quot;) .setSubject(userId + &quot;&quot;) .setIssuedAt(nowDate) .setExpiration(expireDate) .signWith(SignatureAlgorithm.HS512, secret) .compact(); } public Claims getClaimByToken(String token) { try { return Jwts.parser() .setSigningKey(secret) .parseClaimsJws(token) .getBody(); } catch (Exception e){ log.debug(&quot;validate is token error &quot;, e); return null; } } /** * token是否过期 * @return true：过期 */ public boolean isTokenExpired(Date expiration) { return expiration.before(new Date()); } } package com.markerhub.shiro; import org.apache.shiro.authc.AuthenticationToken; /** * @author mingchiuli * @create 2021-10-27 8:04 PM */ public class JwtToken implements AuthenticationToken { private final String token; public JwtToken(String token) { this.token = token; } @Override public Object getPrincipal() { return token; } @Override public Object getCredentials() { return token; } } package com.markerhub.shiro; import cn.hutool.json.JSONUtil; import com.markerhub.common.lang.Result; import com.markerhub.util.JwtUtils; import io.jsonwebtoken.Claims; import lombok.extern.slf4j.Slf4j; import org.apache.shiro.authc.AuthenticationException; import org.apache.shiro.authc.AuthenticationToken; import org.apache.shiro.authc.ExpiredCredentialsException; import org.apache.shiro.web.filter.authc.AuthenticatingFilter; import org.apache.shiro.web.util.WebUtils; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; import org.springframework.util.StringUtils; import org.springframework.web.bind.annotation.RequestMethod; import javax.servlet.ServletRequest; import javax.servlet.ServletResponse; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; /** * @author mingchiuli * @create 2021-10-27 5:58 PM */ @Component @Slf4j public class JwtFilter extends AuthenticatingFilter { JwtUtils jwtUtils; @Autowired private void setJwtUtils(JwtUtils jwtUtils) { this.jwtUtils = jwtUtils; } /** * 执行onAccessDenied时调用executeLogin方法，完成登陆逻辑 * @param servletRequest * @param servletResponse * @return */ @Override protected AuthenticationToken createToken(ServletRequest servletRequest, ServletResponse servletResponse) { // 获取 token HttpServletRequest request = (HttpServletRequest) servletRequest; String jwt = request.getHeader(&quot;Authorization&quot;); if(!StringUtils.hasLength(jwt)) { return null; } return new JwtToken(jwt); } @Override protected boolean onAccessDenied(ServletRequest servletRequest, ServletResponse servletResponse) throws Exception { log.info(&quot;进入拦截器&quot;); HttpServletRequest request = (HttpServletRequest) servletRequest; String token = request.getHeader(&quot;Authorization&quot;); if(!StringUtils.hasLength(token)) { return true; } else { // 教验jwt Claims claim = jwtUtils.getClaimByToken(token); // 判断是否已过期 if (claim == null || jwtUtils.isTokenExpired(claim.getExpiration())) { log.error(&quot;token失效&quot;); throw new ExpiredCredentialsException(&quot;token expired&quot;); } } // 执行自动登录 return executeLogin(servletRequest, servletResponse); } @Override protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response) { HttpServletResponse httpResponse = (HttpServletResponse) response; try { //处理登录失败的异常 Throwable throwable = e.getCause() == null ? e : e.getCause(); Result r = Result.fail(throwable.getMessage()); String json = JSONUtil.toJsonStr(r); httpResponse.getWriter().print(json); } catch (IOException ignored) { } return false; } /** * 对跨域提供支持 */ @Override protected boolean preHandle(ServletRequest request, ServletResponse response) throws Exception { HttpServletRequest httpServletRequest = WebUtils.toHttp(request); HttpServletResponse httpServletResponse = WebUtils.toHttp(response); httpServletResponse.setHeader(&quot;Access-control-Allow-Origin&quot;, httpServletRequest.getHeader(&quot;Origin&quot;)); httpServletResponse.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET,POST,OPTIONS,PUT,DELETE&quot;); httpServletResponse.setHeader(&quot;Access-Control-Allow-Headers&quot;, httpServletRequest.getHeader(&quot;Access-Control-Request-Headers&quot;)); // 跨域时会首先发送一个OPTIONS请求，这里我们给OPTIONS请求直接返回正常状态 if (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())) { httpServletResponse.setStatus(org.springframework.http.HttpStatus.OK.value()); return false; } return super.preHandle(request, response); } } package com.markerhub.shiro; import lombok.Data; import java.io.Serializable; /** * @author mingchiuli * @create 2021-10-27 9:16 PM */ @Data public class AccountProfile implements Serializable { private static final long serialVersionUID = -3207880482640325843L; private Long id; private String username; private String avatar; private String email; } 核心是Realm: package com.markerhub.shiro; import cn.hutool.core.bean.BeanUtil; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper; import com.fasterxml.jackson.databind.ObjectMapper; import com.markerhub.common.lang.Const; import com.markerhub.entity.User; import com.markerhub.service.UserService; import com.markerhub.util.JwtUtils; import com.markerhub.util.MyUtils; import io.jsonwebtoken.Claims; import lombok.extern.slf4j.Slf4j; import org.apache.shiro.authc.*; import org.apache.shiro.authz.AuthorizationInfo; import org.apache.shiro.authz.SimpleAuthorizationInfo; import org.apache.shiro.realm.AuthorizingRealm; import org.apache.shiro.subject.PrincipalCollection; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.stereotype.Component; import java.util.HashMap; import java.util.LinkedHashMap; import java.util.concurrent.TimeUnit; /** * @author mingchiuli * @create 2021-10-27 5:44 PM */ @Component @Slf4j public class AccountRealm extends AuthorizingRealm { UserService userService; @Autowired private void setUserServiceImpl(UserService userService) { this.userService = userService; } RedisTemplate&lt;String, Object&gt; redisTemplate; @Autowired private void setRedisTemplateImpl(RedisTemplate&lt;String, Object&gt; redisTemplate) { this.redisTemplate = redisTemplate; } JwtUtils jwtUtils; @Autowired private void setJwtUtils(JwtUtils jwtUtils) { this.jwtUtils = jwtUtils; } @Override public boolean supports(AuthenticationToken token) { return token instanceof JwtToken; } @Override protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) { AccountProfile accountProfile = (AccountProfile)principals.getPrimaryPrincipal(); SimpleAuthorizationInfo info = new SimpleAuthorizationInfo(); Long id = accountProfile.getId(); log.info(&quot;开始授权&quot;); String role; if (Boolean.TRUE.equals(redisTemplate.hasKey(Const.ROLE_PREFIX + id))) { role = (String) redisTemplate.opsForValue().get(Const.ROLE_PREFIX + id); } else { role = (String) userService.getBaseMapper().selectObjs(new QueryWrapper&lt;User&gt;().select(&quot;role&quot;).eq(&quot;id&quot;, id)).get(0); redisTemplate.opsForValue().set(Const.ROLE_PREFIX + id, role, 10, TimeUnit.MINUTES); } if (role != null) { info.addRole(role); } log.info(&quot;结束授权&quot;); return info; } @Override protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException { log.info(&quot;进入realm&quot;); JwtToken jwtToken = (JwtToken) token; Claims claim = jwtUtils.getClaimByToken((String) jwtToken.getCredentials()); String userId = claim.getSubject(); String originToken; User myUser; //监控用户登录状态，误差时间10分钟 log.info(&quot;即将进入redis&quot;); if (Boolean.FALSE.equals(redisTemplate.hasKey(Const.USER_PREFIX + userId))) {//如果缓存里的信息过期，就重新往里写 User user = userService.getById(userId); String myToken = (String) jwtToken.getCredentials(); HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(Const.USER_OBJECT, user); map.put(Const.TOKEN, myToken); redisTemplate.opsForHash().putAll(Const.USER_PREFIX + userId, map); //续10分钟 redisTemplate.expire(Const.USER_PREFIX + userId, 10 * 60, TimeUnit.SECONDS); originToken = myToken; myUser = user; } else {//如果缓存里的信息没有过期，就续10分钟，然后读取缓存中的user判断，此时包含用户被踢下线的情况 redisTemplate.expire(Const.USER_PREFIX + userId, 10 * 60, TimeUnit.SECONDS); LinkedHashMap&lt;String, Object&gt; userInfo = (LinkedHashMap&lt;String, Object&gt;) redisTemplate.opsForHash().get(Const.USER_PREFIX + userId, Const.USER_OBJECT); ObjectMapper objectMapper = new ObjectMapper(); User user = objectMapper.convertValue(userInfo, User.class); if (user == null) { throw new UnknownAccountException(&quot;account not exist&quot;); } originToken = (String) redisTemplate.opsForHash().get(Const.USER_PREFIX + userId, Const.TOKEN); myUser = user; } AccountProfile profile = new AccountProfile(); BeanUtil.copyProperties(myUser, profile); log.info(&quot;成功执行redis&quot;); return new SimpleAuthenticationInfo(profile, originToken, getName()); } } 我这里还做了一个踢人的功能。初步想法是，jwt是无状态的，所以服务器没有session，于是就无法对登录的用户进行统一管理。就算服务器宕机了，重启以后之前的登录状态仍然是有效的。我把用户的token放到缓存里了，一方面过过滤器的时候可以快一些，另一方面就是可以对用户登录状态进行管理了。 1.3 controller package com.markerhub.controller; import cn.hutool.core.lang.UUID; import cn.hutool.core.map.MapUtil; import cn.hutool.crypto.SecureUtil; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper; import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper; import com.baomidou.mybatisplus.core.toolkit.StringUtils; import com.google.code.kaptcha.Producer; import com.markerhub.common.dto.LoginDto; import com.markerhub.common.lang.Const; import com.markerhub.common.lang.Result; import com.markerhub.entity.User; import com.markerhub.service.UserService; import com.markerhub.util.JwtUtils; import io.jsonwebtoken.Claims; import lombok.extern.slf4j.Slf4j; import org.apache.shiro.SecurityUtils; import org.apache.shiro.authz.annotation.RequiresAuthentication; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.util.Assert; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RestController; import javax.imageio.ImageIO; import javax.servlet.ServletRequest; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.awt.image.BufferedImage; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.time.LocalDateTime; import java.util.Base64; import java.util.HashMap; import java.util.concurrent.TimeUnit; /** * 登录相关 */ @Slf4j @RestController public class AccountController { Producer producer; @Autowired public void setProducer(Producer producer) { this.producer = producer; } UserService userService; @Autowired private void setUserServiceImpl(UserService userService) { this.userService = userService; } JwtUtils jwtUtils; @Autowired private void setJwtUtils(JwtUtils jwtUtils) { this.jwtUtils = jwtUtils; } RedisTemplate&lt;String, Object&gt; redisTemplate; @Autowired private void setRedisTemplateImpl(RedisTemplate&lt;String, Object&gt; redisTemplate) { this.redisTemplate = redisTemplate; } @PostMapping(&quot;/login&quot;) public Result login(@Validated @RequestBody LoginDto loginDto, HttpServletResponse response) { String code = loginDto.getCode(); String key = loginDto.getToken(); if (StringUtils.isBlank(code) || StringUtils.isBlank(key)) { return Result.fail(&quot;验证码无效&quot;); } if (!code.equals(redisTemplate.opsForValue().get(Const.CAPTCHA_KEY + &quot;:&quot; + key))) { return Result.fail(&quot;验证码错误&quot;); } redisTemplate.delete(Const.CAPTCHA_KEY + key); User user = userService.getOne(new QueryWrapper&lt;User&gt;().eq(&quot;username&quot;, loginDto.getUsername())); Assert.notNull(user, &quot;用户不存在&quot;); if (user.getStatus() == 1) { return Result.fail(&quot;账号已停用&quot;); } if(!user.getPassword().equals(SecureUtil.md5(loginDto.getPassword()))){ return Result.fail(&quot;密码不正确&quot;); } String jwt = jwtUtils.generateToken(user.getId()); if (Boolean.TRUE.equals(redisTemplate.hasKey(Const.USER_PREFIX + user.getId())) &amp;&amp; user.getStatus() == 0) { return Result.fail(&quot;用户已登录&quot;); } response.setHeader(&quot;Authorization&quot;, jwt); response.setHeader(&quot;Access-control-Expose-Headers&quot;, &quot;Authorization&quot;); HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(Const.USER_OBJECT, user); map.put(Const.TOKEN, jwt); redisTemplate.opsForHash().putAll(Const.USER_PREFIX + user.getId().toString(), map); redisTemplate.expire(Const.USER_PREFIX + user.getId().toString(), 15 * 60, TimeUnit.SECONDS); userService.update(new UpdateWrapper&lt;User&gt;().set(&quot;last_login&quot;, LocalDateTime.now()).eq(&quot;id&quot;, user.getId())); return Result.succ(MapUtil.builder() .put(&quot;id&quot;, user.getId()) .put(&quot;username&quot;, user.getUsername()) .put(&quot;avatar&quot;, user.getAvatar()) .put(&quot;email&quot;, user.getEmail()) .map() ); } @RequiresAuthentication @GetMapping(&quot;/logout&quot;) public Result logout(ServletRequest servletRequest) { log.info(&quot;进入退出登录方法&quot;); HttpServletRequest request = (HttpServletRequest) servletRequest; String token = request.getHeader(&quot;Authorization&quot;); Claims claim = jwtUtils.getClaimByToken(token); String userId = claim.getSubject(); Boolean delete = redisTemplate.delete(Const.USER_PREFIX + userId); Assert.isTrue(Boolean.TRUE.equals(delete), &quot;退出登录失败&quot;); SecurityUtils.getSubject().logout(); return Result.succ(null); } @GetMapping(&quot;/captcha&quot;) public Result captcha() throws IOException { String key = UUID.randomUUID().toString(); String code = producer.createText(); BufferedImage image = producer.createImage(code); ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); ImageIO.write(image, &quot;jpg&quot;, outputStream); Base64.Encoder encoder = Base64.getEncoder(); String str = &quot;data:image/jpeg;base64,&quot;; String base64Img = str + encoder.encodeToString(outputStream.toByteArray()); redisTemplate.opsForValue().set(Const.CAPTCHA_KEY + &quot;:&quot; + key, code, 120, TimeUnit.SECONDS); return Result.succ( MapUtil.builder() .put(Const.TOKEN, key) .put(&quot;captchaImg&quot;, base64Img) .build() ); } } package com.markerhub.controller; import cn.hutool.core.bean.BeanUtil; import cn.hutool.crypto.SecureUtil; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper; import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper; import com.baomidou.mybatisplus.extension.plugins.pagination.Page; import com.markerhub.common.dto.PasswordDto; import com.markerhub.common.lang.Const; import com.markerhub.common.lang.Result; import com.markerhub.config.RabbitConfig; import com.markerhub.entity.Blog; import com.markerhub.entity.User; import com.markerhub.search.model.mq.PostMQIndexMessage; import com.markerhub.service.BlogService; import com.markerhub.service.UserService; import com.markerhub.util.JwtUtils; import com.markerhub.util.MyUtils; import com.markerhub.util.ShiroUtil; import lombok.extern.slf4j.Slf4j; import org.apache.shiro.authz.annotation.RequiresAuthentication; import org.apache.shiro.authz.annotation.RequiresRoles; import org.springframework.amqp.core.AmqpTemplate; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.util.Assert; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.*; import java.io.File; import java.time.LocalDateTime; import java.util.*; import java.util.concurrent.TimeUnit; /** * 后台功能 * @author mingchiuli * @create 2021-12-06 8:10 PM */ @RestController @Slf4j public class BackStageController { @Value(&quot;${uploadPath}&quot;) private String baseFolderPath; @Value(&quot;${imgFoldName}&quot;) private String img; BlogService blogService; @Autowired private void setBlogServiceImpl(BlogService blogService) { this.blogService = blogService; } UserService userService; @Autowired private void setUserServiceImpl(UserService userService) { this.userService = userService; } RedisTemplate&lt;String, Object&gt; redisTemplate; @Autowired private void setRedisTemplateImpl(RedisTemplate&lt;String, Object&gt; redisTemplate) { this.redisTemplate = redisTemplate; } JwtUtils jwtUtils; @Autowired private void setJwtUtils(JwtUtils jwtUtils) { this.jwtUtils = jwtUtils; } AmqpTemplate amqpTemplate; @Autowired public void setAmqpTemplate(AmqpTemplate amqpTemplate) { this.amqpTemplate = amqpTemplate; } /** * 新增和修改博客 * @param blog * @return */ // @Transactional @RequiresAuthentication @RequiresRoles(&quot;admin&quot;) @PostMapping(&quot;/blog/edit&quot;) public Result edit(@Validated @RequestBody Blog blog) { Blog temp; //都是更新，之前初始化过了 if(blog.getId() != null) { temp = blogService.getById(blog.getId()); // 只能编辑自己的文章 Assert.isTrue(temp.getUserId().longValue() == ShiroUtil.getProfile().getId().longValue(), &quot;没有权限编辑&quot;); } else { temp = new Blog(); temp.setUserId(ShiroUtil.getProfile().getId()); temp.setCreated(LocalDateTime.now()); temp.setStatus(0); } BeanUtil.copyProperties(blog, temp, &quot;id&quot;, &quot;userId&quot;, &quot;created&quot;, &quot;status&quot;); boolean update = blogService.saveOrUpdate(temp); Assert.isTrue(update, &quot;出现错误&quot;); //通知消息给mq,更新 amqpTemplate.convertAndSend( RabbitConfig.ES_EXCHANGE, RabbitConfig.ES_BINDING_KEY, new PostMQIndexMessage(blog.getId(), PostMQIndexMessage.UPDATE)); //删除缓存热点 String prefix = Const.HOT_PREFIX; Set&lt;String&gt; keys = redisTemplate.keys(prefix + &quot;*&quot;); if (keys != null) { redisTemplate.delete(keys); } return Result.succ(null); } /** * 初始化文章，目的是拿到创建时间，从而让每篇文章的上传图片位于每一个文件夹中 * @return */ @RequiresAuthentication @RequiresRoles(&quot;admin&quot;) @GetMapping(&quot;/addNewBlog&quot;) public Result addNewBlog() { Blog blog = new Blog(); blog.setUserId(ShiroUtil.getProfile().getId()); blog.setCreated(LocalDateTime.now()); blog.setStatus(0); blog.setTitle(&quot;每天都有好心情&quot;); blog.setDescription(&quot;&quot;); blog.setContent(&quot;&quot;); blogService.saveOrUpdate(blog); //通知消息给mq amqpTemplate.convertAndSend( RabbitConfig.ES_EXCHANGE, RabbitConfig.ES_BINDING_KEY, new PostMQIndexMessage(blog.getId(), PostMQIndexMessage.CREATE)); return Result.succ(blog.getId()); } /** * 查看已经删除的博客 * @param currentPage * @return */ @RequiresAuthentication @RequiresRoles(&quot;admin&quot;) @GetMapping(&quot;/queryDeletedBlogs&quot;) public Result listDeleted(@RequestParam String title, @RequestParam Integer currentPage, @RequestParam Integer size, @RequestParam Long userId) { User one = userService.getOne(new QueryWrapper&lt;User&gt;().eq(&quot;id&quot;, userId).last(&quot;LIMIT 1&quot;)); String username = one.getUsername(); String prefix = userId + &quot;:blog:*&quot;; Set&lt;String&gt; keys = redisTemplate.keys(prefix); if (keys != null) { List&lt;Object&gt; rawAllDeleted = redisTemplate.opsForValue().multiGet(keys); if (rawAllDeleted != null) { ArrayList&lt;Blog&gt; allDeleted = new ArrayList&lt;&gt;(); for (Object value : rawAllDeleted) { Blog blog = MyUtils.jsonToObj(value, Blog.class); allDeleted.add(blog); } if (&quot;&quot;.equals(title)) { //以创建时间排序，由晚到早 allDeleted.sort((o1, o2) -&gt; -o1.getCreated().compareTo(o2.getCreated())); Page&lt;Blog&gt; page = MyUtils.listToPage(allDeleted, currentPage, size); List&lt;Blog&gt; records = page.getRecords(); for (Blog record : records) { record.setUsername(username); } page.setRecords(records); return Result.succ(page); } else { ArrayList&lt;Blog&gt; blogs = new ArrayList&lt;&gt;(); for (Blog blog : allDeleted) { if (blog.getTitle().contains(title)) { blogs.add(blog); } } blogs.sort((o1, o2) -&gt; -o1.getCreated().compareTo(o2.getCreated())); Page&lt;Blog&gt; page = MyUtils.listToPage(blogs, currentPage, size); List&lt;Blog&gt; records = page.getRecords(); for (Blog record : records) { record.setUsername(username); } page.setRecords(records); return Result.succ(page); } } } return Result.fail(&quot;读取失败&quot;); } /** * 恢复删除的博客 * @param id * @return */ @RequiresAuthentication @RequiresRoles(&quot;admin&quot;) @GetMapping(&quot;/recoverBlogs/{id}/{userId}&quot;) public Result recoverBlog(@PathVariable(name = &quot;id&quot;) Long id, @PathVariable(name = &quot;userId&quot;) Long userId) { String key = userId + &quot;:blog:&quot; + id; LinkedHashMap&lt;String, Object&gt; value = (LinkedHashMap&lt;String, Object&gt;) redisTemplate.opsForValue().get(key); Blog blog = MyUtils.jsonToObj(value, Blog.class); Assert.notNull(blog, &quot;恢复异常&quot;); //用saveOrUpdate(blog)会导致id自增，这里要恢复原来的id boolean recover = blogService.recover(blog); Assert.isTrue(recover, &quot;恢复失败&quot;); redisTemplate.delete(key); //通知消息给mq amqpTemplate.convertAndSend( RabbitConfig.ES_EXCHANGE, RabbitConfig.ES_BINDING_KEY, new PostMQIndexMessage(id, PostMQIndexMessage.CREATE)); //删除缓存热点 String prefix = Const.HOT_PREFIX; Set&lt;String&gt; keys = redisTemplate.keys(prefix + &quot;*&quot;); if (keys != null) { redisTemplate.delete(keys); } return Result.succ(null); } /** * 更改账户状态，0可以正常使用，1禁用 */ @RequiresRoles(&quot;admin&quot;) @RequiresAuthentication @GetMapping(&quot;/modifyUser/{id}/{status}&quot;) public Result modifyUser(@PathVariable Integer id, @PathVariable Integer status) { boolean update = userService.update(new UpdateWrapper&lt;User&gt;().eq(&quot;id&quot;, id).set(&quot;status&quot;, status)); Assert.isTrue(update, &quot;删除失败&quot;); return Result.succ(null); } /** * 更改文章状态，0为公开，1为登录后可阅读 */ @RequiresRoles(&quot;admin&quot;) @RequiresAuthentication @GetMapping(&quot;/modifyBlogStatus/{id}/{status}&quot;) public Result modifyBlogStatus(@PathVariable Integer id, @PathVariable Integer status) { LocalDateTime created = blogService.getById(id).getCreated(); boolean update = blogService.update(new UpdateWrapper&lt;Blog&gt;().eq(&quot;id&quot;, id).set(&quot;status&quot;, status).set(&quot;created&quot;, created)); Assert.isTrue(update, &quot;修改失败&quot;); return Result.succ(null); } /** * 查询全部博客记录，包含总阅读数和最近7日阅读数 * @param currentPage * @return */ @RequiresAuthentication @GetMapping(&quot;/queryBlogs&quot;) public Result queryAllBlogs(@RequestParam String title, @RequestParam Integer currentPage, @RequestParam Integer size) { log.info(&quot;进入了全部博客记录&quot;); List&lt;Blog&gt; blogsList; //查询相关数据 if (&quot;&quot;.equals(title)) { blogsList = blogService.queryAllBlogs(); } else { blogsList = blogService.queryBlogs(title); } //将相关数据封装Page对象 Page&lt;Blog&gt; page = MyUtils.listToPage(blogsList, currentPage, size); List&lt;Blog&gt; blogs = page.getRecords(); ArrayList&lt;Object&gt; ids = new ArrayList&lt;&gt;(); for(Blog blog : blogs) { ids.add(blog.getId().toString()); } //为数据设置7日阅读和总阅读数 List&lt;Object&gt; listSum = redisTemplate.opsForHash().multiGet(Const.READ_SUM, ids); for (int i = 0; i &lt; blogs.size(); i++) { Blog blog = blogs.get(i); if (listSum.get(i) != null) { blog.setReadSum((Integer) listSum.get(i)); Integer recentNum = (Integer) redisTemplate.opsForValue().get(Const.READ_RECENT + blog.getId()); blog.setReadRecent(Objects.requireNonNullElse(recentNum, 0)); } else { blog.setReadSum(0); blog.setReadRecent(0); } } page.setRecords(blogs); return Result.succ(page); } /** * 查询账号 */ @RequiresAuthentication @GetMapping(&quot;/queryUsers&quot;) public Result queryUsers(@RequestParam String role, @RequestParam Integer currentPage, @RequestParam Integer size) { log.info(&quot;进入了查询账号&quot;); Page&lt;User&gt; userPage = new Page&lt;&gt;(currentPage, size); Page&lt;User&gt; page; if (!&quot;&quot;.equals(role)) {//搜索 page = userService.page(userPage, new QueryWrapper&lt;User&gt;().eq(&quot;role&quot;, role)); } else {//不是搜索 page = userService.page(userPage, new QueryWrapper&lt;User&gt;().select(&quot;id&quot;, &quot;username&quot;, &quot;avatar&quot;, &quot;email&quot;, &quot;status&quot;, &quot;created&quot;, &quot;last_login&quot;, &quot;role&quot;).orderByAsc(&quot;created&quot;)); } List&lt;User&gt; records = page.getRecords(); for (User record : records) { if (Boolean.TRUE.equals(redisTemplate.hasKey(Const.USER_PREFIX + record.getId())) &amp;&amp; record.getStatus() == 0) { record.setMonitor(1); } else { record.setMonitor(0); } } page.setRecords(records); return Result.succ(page); } /** * 新增账号，修改信息 */ @RequiresAuthentication @RequiresRoles(&quot;admin&quot;) @PostMapping(&quot;/addUser&quot;) public Result addUser(@Validated @RequestBody User user) { User userExist = userService.getBaseMapper().selectOne(new QueryWrapper&lt;User&gt;().eq(&quot;id&quot;, user.getId())); if (userExist == null) {//添加 user.setPassword(SecureUtil.md5(user.getPassword())); user.setCreated(LocalDateTime.now()); user.setLastLogin(LocalDateTime.now()); boolean update = userService.saveOrUpdate(user); Assert.isTrue(update, &quot;添加失败&quot;); } else {//修改 userExist.setStatus(user.getStatus()); userExist.setAvatar(user.getAvatar()); userExist.setEmail(user.getEmail()); userExist.setRole(user.getRole()); boolean update = userService.saveOrUpdate(user); Assert.isTrue(update, &quot;修改失败&quot;); //删除缓存角色授权信息 redisTemplate.delete(Const.ROLE_PREFIX + user.getId()); } return Result.succ(null); } /** * 删除博客 * @param ids * @return */ @RequiresAuthentication @RequiresRoles(&quot;admin&quot;) @PostMapping(&quot;/deleteBlogs&quot;) public Result deleteBlogs(@RequestBody Long[] ids) { ArrayList&lt;Long&gt; idList = new ArrayList&lt;&gt;(List.of(ids)); for (Long id : idList) { Blog blog = blogService.getById(id); redisTemplate.opsForHash().delete(&quot;blogsReadSum&quot;, id.toString()); redisTemplate.opsForValue().set(blog.getUserId() + &quot;:blog:&quot; + id, blog, 7 * 24 * 60, TimeUnit.MINUTES); /* * 直接删除对应的文件夹，提高效率 */ String createdTime = blog.getCreated().toString(); String created = createdTime .replaceAll(&quot;-&quot;, &quot;&quot;) .replaceAll(&quot;T&quot;, &quot;&quot;) .replaceAll(&quot;:&quot;, &quot;&quot;); String finalDest = baseFolderPath + img + &quot;/&quot; + created; File file = new File(finalDest); MyUtils.deleteAllImg(file); boolean update = blogService.update(new UpdateWrapper&lt;Blog&gt;().set(&quot;created&quot;, LocalDateTime.now()).eq(&quot;id&quot;, id)); Assert.isTrue(update, &quot;设置删除时间失败&quot;); //删除文章 boolean remove = blogService.removeById(id); Assert.isTrue(remove, &quot;删除失败&quot;); //通知消息给mq amqpTemplate.convertAndSend( RabbitConfig.ES_EXCHANGE, RabbitConfig.ES_BINDING_KEY, new PostMQIndexMessage(id, PostMQIndexMessage.REMOVE)); } //删除缓存热点 String prefix = Const.HOT_PREFIX; Set&lt;String&gt; keys = redisTemplate.keys(prefix + &quot;*&quot;); if (keys != null) { redisTemplate.delete(keys); } return Result.succ(&quot;删除成功&quot;); } /** * 删除账号，批量 * @param ids * @return */ @RequiresAuthentication @RequiresRoles(&quot;admin&quot;) @PostMapping(&quot;/deleteUsers&quot;) public Result deleteUsers(@RequestBody Long[] ids) { ArrayList&lt;Long&gt; idList = new ArrayList&lt;&gt;(List.of(ids)); boolean remove = userService.removeByIds(idList); Assert.isTrue(remove, &quot;删除失败&quot;); return Result.succ(null); } /** * 回显信息 * @param id * @return */ @RequiresAuthentication @GetMapping(&quot;/getInfoById/{id}&quot;) public Result getRoleId(@PathVariable Long id) { User user = userService.getBaseMapper().selectOne(new QueryWrapper&lt;User&gt;().eq(&quot;id&quot;, id).select(&quot;id&quot;, &quot;username&quot;, &quot;email&quot;, &quot;role&quot;, &quot;avatar&quot;, &quot;status&quot;)); return Result.succ(user); } /** * 踢人下线 * @param id * @return */ @RequiresAuthentication @RequiresRoles(&quot;admin&quot;) @GetMapping(&quot;/roleKick/{id}&quot;) public Result roleKick(@PathVariable Long id) { //先进行锁定 boolean update = userService.update(new UpdateWrapper&lt;User&gt;().eq(&quot;id&quot;, id).set(&quot;status&quot;, 1)); Assert.isTrue(update, &quot;锁定失败&quot;); //再对缓存进行更新赋值操作 User user = userService.getById(id); String jwt = jwtUtils.generateToken(id); HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(Const.USER_OBJECT, user); map.put(Const.TOKEN, jwt); redisTemplate.opsForHash().putAll(Const.USER_PREFIX + id, map); //强制锁6小时 redisTemplate.expire(Const.USER_PREFIX + id, 6 * 10 * 60, TimeUnit.SECONDS); return Result.succ(null); } /** * 密码修改 * @param passwordDto * @return */ @RequiresAuthentication @RequiresRoles(&quot;admin&quot;) @PostMapping(&quot;/modifyPassword&quot;) public Result getPassword(@Validated @RequestBody PasswordDto passwordDto) { boolean update = userService.update(new UpdateWrapper&lt;User&gt;().eq(&quot;username&quot;, passwordDto.getUsername()).set(&quot;password&quot;, SecureUtil.md5(passwordDto.getPassword()))); Assert.isTrue(update, &quot;修改密码失败&quot;); return Result.succ(null); } } package com.markerhub.controller; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper; import com.baomidou.mybatisplus.core.metadata.IPage; import com.baomidou.mybatisplus.extension.plugins.pagination.Page; import com.markerhub.common.cache.Cache; import com.markerhub.common.lang.Const; import com.markerhub.common.lang.Result; import com.markerhub.entity.Blog; import com.markerhub.search.model.BlogPostDocument; import com.markerhub.service.BlogService; import com.markerhub.service.UserService; import com.markerhub.util.MyUtils; import lombok.extern.slf4j.Slf4j; import org.apache.shiro.authc.AuthenticationException; import org.apache.shiro.authz.annotation.Logical; import org.apache.shiro.authz.annotation.RequiresAuthentication; import org.apache.shiro.authz.annotation.RequiresRoles; import org.elasticsearch.ResourceNotFoundException; import org.elasticsearch.index.query.MultiMatchQueryBuilder; import org.elasticsearch.index.query.QueryBuilders; import org.elasticsearch.search.sort.SortBuilders; import org.elasticsearch.search.sort.SortOrder; import org.springframework.amqp.core.AmqpTemplate; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate; import org.springframework.data.elasticsearch.core.SearchHit; import org.springframework.data.elasticsearch.core.SearchHits; import org.springframework.data.elasticsearch.core.query.NativeSearchQuery; import org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.util.Assert; import org.springframework.web.bind.annotation.*; import java.time.LocalDateTime; import java.util.ArrayList; import java.util.concurrent.TimeUnit; /** * &lt;p&gt; * 前台博客操作 * &lt;/p&gt; * * @since 2020-05-25 */ @Slf4j @RestController public class BlogController { BlogService blogService; @Autowired private void setBlogServiceImpl(BlogService blogService) { this.blogService = blogService; } UserService userService; @Autowired private void setUserServiceImpl(UserService userService) { this.userService = userService; } RedisTemplate&lt;String, Object&gt; redisTemplate; @Autowired private void setRedisTemplateImpl(RedisTemplate&lt;String, Object&gt; redisTemplate) { this.redisTemplate = redisTemplate; } ElasticsearchRestTemplate elasticsearchRestTemplate; @Autowired public void setElasticsearchRestTemplate(ElasticsearchRestTemplate elasticsearchRestTemplate) { this.elasticsearchRestTemplate = elasticsearchRestTemplate; } AmqpTemplate amqpTemplate; @Autowired public void setAmqpTemplate(AmqpTemplate amqpTemplate) { this.amqpTemplate = amqpTemplate; } /** * 按照年份给出博客内容 * @param currentPage * @param year * @return */ @GetMapping(&quot;/blogsByYear/{year}/{currentPage}&quot;) public Result listByYear(@PathVariable(name = &quot;currentPage&quot;) Integer currentPage, @PathVariable(name = &quot;year&quot;) Integer year) { log.info(&quot;进入了检索方法&quot;); Page&lt;Blog&gt; page = new Page&lt;&gt;(currentPage, 5); QueryWrapper&lt;Blog&gt; queryWrapper = new QueryWrapper&lt;&gt;(); LocalDateTime start = LocalDateTime.of(year, 1, 1, 0, 0, 0); LocalDateTime end = LocalDateTime.of(year, 12, 31, 23, 59, 59); QueryWrapper&lt;Blog&gt; wrapper = queryWrapper.select(&quot;id&quot;, &quot;title&quot;, &quot;description&quot;, &quot;created&quot;).between(&quot;created&quot;, start, end).orderByAsc(&quot;created&quot;); IPage&lt;Blog&gt; pageData = blogService.page(page, wrapper); return Result.succ(pageData); } @GetMapping(&quot;/getCountByYear/{year}&quot;) public Result getCountByYear(@PathVariable(name = &quot;year&quot;) Integer year) { Integer count = blogService.getYearCount(year); return Result.succ(count); } /** * 所有博客内容 * @param currentPage * @return */ @Cache(name = &quot;hot_blogs&quot;)//缓存页面信息一分钟 @GetMapping(&quot;/blogs/{currentPage}&quot;) public Result list(@PathVariable(name = &quot;currentPage&quot;) Integer currentPage) { log.info(&quot;进入了检索方法&quot;); int totalPage = blogService.count() % 5 == 0 ? blogService.count() / 5 : blogService.count() / 5 + 1; if (currentPage &gt; totalPage) { Page&lt;Blog&gt; page = new Page&lt;&gt;(totalPage, 5); IPage&lt;Blog&gt; pageData = blogService.page(page, new QueryWrapper&lt;Blog&gt;().select(&quot;title&quot;, &quot;description&quot;, &quot;created&quot;).orderByDesc(&quot;created&quot;)); return Result.succ(pageData); } if (totalPage &lt; 1) { Page&lt;Blog&gt; page = new Page&lt;&gt;(1, 5); IPage&lt;Blog&gt; pageData = blogService.page(page, new QueryWrapper&lt;Blog&gt;().select(&quot;title&quot;, &quot;description&quot;, &quot;created&quot;).orderByDesc(&quot;created&quot;)); return Result.succ(pageData); } Page&lt;Blog&gt; page = new Page&lt;&gt;(currentPage, 5); IPage&lt;Blog&gt; pageData = blogService.page(page, new QueryWrapper&lt;Blog&gt;().select(&quot;id&quot;, &quot;title&quot;, &quot;description&quot;, &quot;created&quot;).orderByDesc(&quot;created&quot;)); return Result.succ(pageData); } /** * 博客详情 * @param id * @return */ @GetMapping(&quot;/blog/{id}&quot;) public Result detail(@PathVariable(name = &quot;id&quot;) Long id) { log.info(&quot;进入了博客详情方法&quot;); if (blogService.getById(id).getStatus() == 1) { throw new AuthenticationException(&quot;没有访问权限&quot;); } Blog blog = blogService.getBaseMapper().selectOne(new QueryWrapper&lt;Blog&gt;().eq(&quot;status&quot;, 0).eq(&quot;id&quot;, id)); Assert.notNull(blog, &quot;该博客不存在&quot;); redisTemplate.opsForHash().increment(Const.READ_SUM, &quot;&quot; + id , 1); if (redisTemplate.opsForValue().get(Const.READ_RECENT + id) == null) { redisTemplate.opsForValue().set(Const.READ_RECENT + id, 1, 7, TimeUnit.DAYS); } else { redisTemplate.opsForValue().increment(Const.READ_RECENT + id, 1); } return Result.succ(blog); } @GetMapping(&quot;/blogAuthorized/{id}&quot;) @RequiresAuthentication @RequiresRoles(value = {&quot;admin&quot;, &quot;guest&quot;}, logical = Logical.OR) public Result detailAuthorized(@PathVariable(name = &quot;id&quot;) Long id) { log.info(&quot;进入了博客详情的授权方法&quot;); Blog blog = blogService.getById(id); Assert.notNull(blog, &quot;该博客不存在&quot;); redisTemplate.opsForHash().increment(Const.READ_SUM, &quot;&quot; + id , 1); if (redisTemplate.opsForValue().get(Const.READ_RECENT + id) == null) { redisTemplate.opsForValue().set(Const.READ_RECENT + id, 1, 7, TimeUnit.DAYS); } else { redisTemplate.opsForValue().increment(Const.READ_RECENT + id, 1); } return Result.succ(blog); } /** * 搜索功能，从es搜索 */ @GetMapping(&quot;/search/{currentPage}&quot;) public Result search(@PathVariable Integer currentPage, @RequestParam String keyword) { log.info(&quot;进入了搜索方法&quot;); MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders.multiMatchQuery(keyword, &quot;title&quot;, &quot;description&quot;, &quot;content&quot;); NativeSearchQuery nativeSearchQuery = new NativeSearchQueryBuilder() .withQuery(multiMatchQueryBuilder) .withSort(SortBuilders.fieldSort(&quot;created&quot;).order(SortOrder.DESC)) .build(); SearchHits&lt;BlogPostDocument&gt; search = elasticsearchRestTemplate.search(nativeSearchQuery, BlogPostDocument.class); if (search.getTotalHits() == 0) { throw new ResourceNotFoundException(&quot;没有相关记录&quot;); } // List&lt;SearchHit&lt;BlogPostDocument&gt;&gt; list = search.getSearchHits(); ArrayList&lt;BlogPostDocument&gt; list = new ArrayList&lt;&gt;(); for (SearchHit&lt;BlogPostDocument&gt; hit : search.getSearchHits()) { list.add(hit.getContent()); } Page&lt;BlogPostDocument&gt; page = MyUtils.listToPage(list, currentPage, 5); return Result.succ(page); } @GetMapping(&quot;/searchByYear/{currentPage}/{year}&quot;) public Result searchByYear(@PathVariable Integer currentPage, @RequestParam String keyword, @PathVariable Integer year) { log.info(&quot;进入了搜索方法&quot;); MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders.multiMatchQuery(keyword, &quot;title&quot;, &quot;description&quot;, &quot;content&quot;); NativeSearchQuery nativeSearchQuery = new NativeSearchQueryBuilder() .withQuery(QueryBuilders.boolQuery() .must(QueryBuilders.rangeQuery(&quot;created&quot;).gte(year + &quot;-01-01T00:00:00&quot;).lte(year + &quot;-12-31T23:59:59&quot;) .includeUpper(true) .includeLower(true)) .must(multiMatchQueryBuilder)) .withSort(SortBuilders.fieldSort(&quot;created&quot;).order(SortOrder.DESC)) .build(); SearchHits&lt;BlogPostDocument&gt; search = elasticsearchRestTemplate.search(nativeSearchQuery, BlogPostDocument.class); if (search.getTotalHits() == 0) { throw new ResourceNotFoundException(&quot;没有相关记录&quot;); } ArrayList&lt;BlogPostDocument&gt; list = new ArrayList&lt;&gt;(); for (SearchHit&lt;BlogPostDocument&gt; hit : search.getSearchHits()) { list.add(hit.getContent()); } Page&lt;BlogPostDocument&gt; page = MyUtils.listToPage(list, currentPage, 5); return Result.succ(page); } } package com.markerhub.controller; import com.markerhub.common.lang.Result; import com.markerhub.entity.Blog; import com.markerhub.search.model.BlogPostDocument; import com.markerhub.service.BlogService; import com.markerhub.util.MyUtils; import lombok.extern.slf4j.Slf4j; import org.apache.shiro.authz.annotation.RequiresAuthentication; import org.apache.shiro.authz.annotation.RequiresRoles; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import java.util.List; /** * 用于将原来的日志同步到es中，要求最高权限才能执行 * 用postman发请求执行，前端不做按钮 * @author mingchiuli * @create 2021-12-14 12:14 AM */ @Slf4j @Controller public class SyncController { BlogService blogService; ElasticsearchRestTemplate elasticsearchRestTemplate; @Autowired public void setBlogService(BlogService blogService) { this.blogService = blogService; } @Autowired public void setElasticsearchRestTemplate(ElasticsearchRestTemplate elasticsearchRestTemplate) { this.elasticsearchRestTemplate = elasticsearchRestTemplate; } @GetMapping(&quot;/sync&quot;) @RequiresAuthentication @RequiresRoles(&quot;admin&quot;) public Result sync() { log.info(&quot;开始同步&quot;); List&lt;Blog&gt; blogs = blogService.list(); for (Blog blog : blogs) { BlogPostDocument document = MyUtils.blogToDocument(blog); elasticsearchRestTemplate.save(document); } return Result.succ(null); } } package com.markerhub.controller; import com.markerhub.common.lang.Const; import com.markerhub.common.lang.Result; import com.markerhub.service.BlogService; import org.apache.shiro.authz.annotation.RequiresAuthentication; import org.elasticsearch.ResourceNotFoundException; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.util.FileCopyUtils; import org.springframework.web.bind.annotation.*; import org.springframework.web.multipart.MultipartFile; import javax.servlet.http.HttpServletRequest; import java.io.File; import java.io.IOException; import java.util.UUID; /** * 图片上传到img文件夹和删除 * @author mingchiuli * @create 2021-11-05 5:02 PM */ @RestController public class UploadController { @Value(&quot;${uploadPath}&quot;) private String baseFolderPath; @Value(&quot;${imgFoldName}&quot;) private String img; BlogService blogService; @Autowired private void setBlogServiceImpl(BlogService blogService) { this.blogService = blogService; } @RequiresAuthentication @PostMapping(&quot;/upload&quot;) public Result upload(@RequestParam MultipartFile image, HttpServletRequest request, @RequestParam String created) { if (image != null) { String filePath; filePath = created.replaceAll(&quot;-&quot;, &quot;&quot;) .replaceAll(&quot; &quot;, &quot;&quot;) .replaceAll(&quot;:&quot;, &quot;&quot;) .replaceAll(&quot;T&quot;, &quot;&quot;); File baseFolder = new File(baseFolderPath + img + &quot;/&quot; + filePath); if (!baseFolder.exists()) { boolean b= baseFolder.mkdirs(); } StringBuilder url = new StringBuilder(); String filename = image.getOriginalFilename(); //https://blog.csdn.net/Cheguangquan/article/details/104121923 if (filename == null) { throw new ResourceNotFoundException(&quot;图片上传出错&quot;); } String imgName = UUID.randomUUID().toString() .replace(&quot;_&quot;, &quot;&quot;) + &quot;_&quot; + filename .replaceAll(&quot; &quot;, &quot;&quot;); url.append(request.getScheme()) .append(&quot;://&quot;) .append(request.getServerName()) .append(&quot;:&quot;) .append(request.getServerPort()) .append(request.getContextPath()) .append(Const.UPLOAD_IMG_PATH) .append(filePath) .append(&quot;/&quot;) .append(imgName); try { File dest = new File(baseFolder, imgName); FileCopyUtils.copy(image.getBytes(), dest); } catch (IOException e) { e.printStackTrace(); return Result.fail(&quot;上传失败&quot;); } return Result.succ(url.toString()); } return Result.fail(&quot;上传失败&quot;); } @RequiresAuthentication @DeleteMapping(&quot;/delfile&quot;) public Result deleteFile(@RequestParam String url) { //常量是有关url的 int index = url.indexOf(Const.UPLOAD_IMG_PATH) + Const.UPLOAD_IMG_PATH.length() - 1; String dest = url.substring(index); //配置文件里的是上传服务器的路径 String finalDest = baseFolderPath + img + dest; File file = new File(finalDest); if (file.exists()) { boolean b = file.delete(); return Result.succ(&quot;删除结果：&quot; + b); } return Result.fail(&quot;文件不存在&quot;); } } 这里关联了mavon-editor的上传和上传删除。 1.4 Redis 主要写配置类 package com.markerhub.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.data.redis.connection.RedisConnectionFactory; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer; import org.springframework.data.redis.serializer.StringRedisSerializer; /** * @author mingchiuli * @create 2021-11-20 10:03 PM */ @Configuration public class RedisConfig { /** * 去掉key前面的乱码 * @return */ @Bean public RedisTemplate&lt;String, Object&gt; redisTemplateInit(RedisConnectionFactory redisConnectionFactory) { //设置序列化Key的实例化对象 RedisTemplate&lt;String, Object&gt; redisTemplate = new RedisTemplate&lt;&gt;(); redisTemplate.setConnectionFactory(redisConnectionFactory); StringRedisSerializer stringRedisSerializer = new StringRedisSerializer(); Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer&lt;&gt;(Object.class); redisTemplate.setKeySerializer(stringRedisSerializer); redisTemplate.setHashKeySerializer(stringRedisSerializer); redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer); redisTemplate.setValueSerializer(jackson2JsonRedisSerializer); return redisTemplate; } } 因为Redis前缀的问题，必须在这里设置序列化器。一开始我用的是alibaba的fastjson，但是上线以后各种报错，最后还是换成jackson了。 1.5 ElasticSearch 在Springboot启动的时候，他会自动帮你创建ES的索引。但是有时候他是不会创建的，这时候需要手动去创建。参考https://blog.csdn.net/syc000666/article/details/95609937。 package com.markerhub.search.model; import com.fasterxml.jackson.annotation.JsonFormat; import com.fasterxml.jackson.databind.annotation.JsonDeserialize; import com.fasterxml.jackson.databind.annotation.JsonSerialize; import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer; import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer; import lombok.Data; import org.springframework.data.annotation.Id; import org.springframework.data.elasticsearch.annotations.DateFormat; import org.springframework.data.elasticsearch.annotations.Document; import org.springframework.data.elasticsearch.annotations.Field; import org.springframework.data.elasticsearch.annotations.FieldType; import java.io.Serializable; import java.time.LocalDateTime; /** * @author mingchiuli * @create 2021-12-12 6:55 AM */ @Data @Document(indexName = &quot;vueblogpost&quot;) public class BlogPostDocument implements Serializable { @Id private Long id; @Field(type = FieldType.Long) private Long userId; @Field(type = FieldType.Keyword) private Integer status; @Field(type = FieldType.Text, searchAnalyzer = &quot;ik_smart&quot;, analyzer = &quot;ik_max_word&quot;) private String title; @Field(type = FieldType.Text, searchAnalyzer = &quot;ik_smart&quot;, analyzer = &quot;ik_max_word&quot;) private String description; @Field(type = FieldType.Text, searchAnalyzer = &quot;ik_smart&quot;, analyzer = &quot;ik_max_word&quot;) private String content; @JsonDeserialize(using = LocalDateTimeDeserializer.class) @JsonSerialize(using = LocalDateTimeSerializer.class) @JsonFormat(pattern = &quot;uuuu-MM-dd&#39;T&#39;HH:mm:ss&quot;) @Field(type = FieldType.Date, format = DateFormat.date_hour_minute_second) private LocalDateTime created; } 1.6 RabbitMQ 我用消息队列主要是用来配合ES工作的，没有涉及太深。 package com.markerhub.config; import org.springframework.amqp.core.Binding; import org.springframework.amqp.core.BindingBuilder; import org.springframework.amqp.core.DirectExchange; import org.springframework.amqp.core.Queue; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; /** * RabbitMQ * @author mingchiuli * @create 2021-12-12 11:22 PM */ @Configuration public class RabbitConfig { public static final String ES_QUEUE = &quot;ex_queue&quot;; public static final String ES_EXCHANGE = &quot;ex_exchange&quot;; public static final String ES_BINDING_KEY = &quot;ex_exchange&quot;; //队列 @Bean public Queue exQueue() { return new Queue(ES_QUEUE); } //交换机 @Bean public DirectExchange exchange() { return new DirectExchange(ES_EXCHANGE); } //绑定队列和交换机 @Bean public Binding binding(Queue exQueue, DirectExchange exchange) { return BindingBuilder.bind(exQueue).to(exchange).with(ES_BINDING_KEY); } } package com.markerhub.search.model.mq; import lombok.AllArgsConstructor; import lombok.Data; import java.io.Serializable; /** * @author mingchiuli * @create 2021-12-13 10:46 AM */ @Data @AllArgsConstructor public class PostMQIndexMessage implements Serializable { public static final String UPDATE = &quot;update&quot;; public static final String REMOVE = &quot;remove&quot;; public static final String CREATE = &quot;create&quot;; private Long postId; private String type; } package com.markerhub.search.model.mq; import com.fasterxml.jackson.databind.ObjectMapper; import com.markerhub.config.RabbitConfig; import com.markerhub.entity.Blog; import com.markerhub.search.model.BlogPostDocument; import com.markerhub.service.BlogService; import com.markerhub.util.MyUtils; import lombok.SneakyThrows; import lombok.extern.slf4j.Slf4j; import org.springframework.amqp.rabbit.annotation.RabbitHandler; import org.springframework.amqp.rabbit.annotation.RabbitListener; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate; import org.springframework.data.elasticsearch.core.document.Document; import org.springframework.data.elasticsearch.core.mapping.IndexCoordinates; import org.springframework.data.elasticsearch.core.query.UpdateQuery; import org.springframework.data.elasticsearch.core.query.UpdateResponse; import org.springframework.stereotype.Component; /** * @author mingchiuli * @create 2021-12-13 11:38 AM */ @Slf4j @Component @RabbitListener(queues = RabbitConfig.ES_QUEUE) public class MQMessageHandler { BlogService blogService; @Autowired public void setBlogService(BlogService blogService) { this.blogService = blogService; } ElasticsearchRestTemplate elasticsearchRestTemplate; @Autowired public void setElasticsearchRestTemplate(ElasticsearchRestTemplate elasticsearchRestTemplate) { this.elasticsearchRestTemplate = elasticsearchRestTemplate; } @SneakyThrows @RabbitHandler public void handler(PostMQIndexMessage message) { switch (message.getType()) { case PostMQIndexMessage.UPDATE: // Thread.sleep(500); Long updateId = message.getPostId(); Blog blogExisted = blogService.getById(updateId); BlogPostDocument postDocument = MyUtils.blogToDocument(blogExisted); ObjectMapper objectMapper = new ObjectMapper(); String obj = objectMapper.writeValueAsString(postDocument); Document document = Document.parse(obj); UpdateQuery query = UpdateQuery .builder(String.valueOf(updateId)) .withDocument(document) .build(); IndexCoordinates indexCoordinates = elasticsearchRestTemplate.getIndexCoordinatesFor(BlogPostDocument.class); UpdateResponse update = elasticsearchRestTemplate.update(query, indexCoordinates); String result = String.valueOf(update.getResult()); log.info(&quot;更新结果: {}&quot;, result); break; case PostMQIndexMessage.REMOVE: Long deleteId = message.getPostId(); String delete = elasticsearchRestTemplate.delete(deleteId.toString(), BlogPostDocument.class); log.info(&quot;删除结果: {}&quot;, delete); break; case PostMQIndexMessage.CREATE: // Thread.sleep(500); Long createId = message.getPostId(); Blog newBlog = blogService.getById(createId); BlogPostDocument newDocument = MyUtils.blogToDocument(newBlog); BlogPostDocument save = elasticsearchRestTemplate.save(newDocument); log.info(&quot;保存结果: {}&quot;, save); break; default: log.error(&quot;没找到对应的消息类型: {}&quot;, message); } } } 用了ElasticReasrchRestTemplate。 1.7 WebSocket 1.7.1 javax的API： package com.markerhub.config; import org.springframework.context.annotation.Bean; import org.springframework.stereotype.Component; import org.springframework.web.socket.server.standard.ServerEndpointExporter; /** * @author mingchiuli * @create 2021-12-21 11:11 AM */ @Component public class WebSocketConfig { @Bean public ServerEndpointExporter serverEndpointExporter() { return new ServerEndpointExporter(); } } package com.markerhub.component; import cn.hutool.json.JSONArray; import cn.hutool.json.JSONObject; import cn.hutool.json.JSONUtil; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper; import com.markerhub.entity.User; import com.markerhub.service.UserService; import com.markerhub.shiro.JwtToken; import com.markerhub.util.JwtUtils; import com.markerhub.util.SpringUtil; import io.jsonwebtoken.Claims; import lombok.SneakyThrows; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.stereotype.Component; import javax.websocket.*; import javax.websocket.server.PathParam; import javax.websocket.server.ServerEndpoint; import java.util.Map; import java.util.concurrent.ConcurrentHashMap; /** * @author websocket服务 */ @ServerEndpoint(value = &quot;/imserver/{username}/{token}&quot;) @Component public class WebSocketServer { private static final Logger log = LoggerFactory.getLogger(WebSocketServer.class); /** * 记录当前在线连接数 */ public static final Map&lt;String, Session&gt; sessionMap = new ConcurrentHashMap&lt;&gt;(); /** * 连接建立成功调用的方法 */ @OnOpen public synchronized void onOpen(Session session, @PathParam(&quot;token&quot;) String token, @PathParam(&quot;username&quot;) String username) { JwtUtils jwtUtils = SpringUtil.getBean(JwtUtils.class); JwtToken jwtToken = new JwtToken(token); Claims claim = jwtUtils.getClaimByToken((String) jwtToken.getCredentials()); if (claim == null || jwtUtils.isTokenExpired(claim.getExpiration())){ throw new RuntimeException(&quot;身份过期&quot;); } String userId = claim.getSubject(); UserService userService = SpringUtil.getBean(UserService.class); User user = userService.getOne(new QueryWrapper&lt;User&gt;().eq(&quot;id&quot;, userId)); if (!username.equals(user.getUsername())) { throw new RuntimeException(&quot;连接拒绝&quot;); } if (sessionMap.size() == 2) { throw new RuntimeException(&quot;人数已满&quot;); } sessionMap.put(username, session); log.info(&quot;有新用户加入，username={}, 当前在线人数为：{}&quot;, username, sessionMap.size()); JSONObject result = new JSONObject(); JSONArray array = new JSONArray(); result.set(&quot;users&quot;, array); int num = 0; for (Object key : sessionMap.keySet()) { String avatar = userService.getOne(new QueryWrapper&lt;User&gt;().eq(&quot;username&quot;, username)).getAvatar(); JSONObject jsonObject = new JSONObject(); jsonObject.set(&quot;username&quot;, key); jsonObject.set(&quot;avatar&quot;, avatar); jsonObject.set(&quot;number&quot;, ++num); array.add(jsonObject); } // {&quot;users&quot;: [{&quot;username&quot;: &quot;zhang&quot;},{ &quot;username&quot;: &quot;admin&quot;}]} sendAllMessage(JSONUtil.toJsonStr(result)); // 后台发送消息给所有的客户端 } /** * 连接关闭调用的方法 */ @OnClose public void onClose(Session session, @PathParam(&quot;username&quot;) String username) { sessionMap.remove(username); log.info(&quot;有一连接关闭，移除username={}的用户session, 当前在线人数为：{}&quot;, username, sessionMap.size()); } /** * 收到客户端消息后调用的方法 * 后台收到客户端发送过来的消息 * onMessage 是一个消息的中转站 * 接受 浏览器端 socket.send 发送过来的 json数据 * @param message 客户端发送过来的消息 */ @SneakyThrows @OnMessage public void onMessage(String message, Session session, @PathParam(&quot;username&quot;) String username) { log.info(&quot;服务端收到用户username={}的消息:{}&quot;, username, message); JSONObject obj = JSONUtil.parseObj(message); if (obj.containsKey(&quot;to&quot;) &amp;&amp; obj.containsKey(&quot;from&quot;) &amp;&amp; obj.containsKey(&quot;text&quot;)) { String toUsername = obj.getStr(&quot;to&quot;); // to表示发送给哪个用户，比如 admin String text = obj.getStr(&quot;text&quot;); // 发送的消息文本 hello // {&quot;to&quot;: &quot;admin&quot;, &quot;text&quot;: &quot;聊天文本&quot;} Session toSession = sessionMap.get(toUsername); // 根据 to用户名来获取 session，再通过session发送消息文本 if (toSession != null) { // 服务器端 再把消息组装一下，组装后的消息包含发送人和发送的文本内容 // {&quot;from&quot;: &quot;zhang&quot;, &quot;text&quot;: &quot;hello&quot;} JSONObject jsonObject = new JSONObject(); jsonObject.set(&quot;from&quot;, username); // from 是 zhang jsonObject.set(&quot;text&quot;, text); // text 同上面的text this.sendMessage(jsonObject.toString(), toSession); log.info(&quot;发送给用户username={}，消息：{}&quot;, toUsername, jsonObject.toString()); } else { log.info(&quot;发送失败，未找到用户username={}的session&quot;, toUsername); } } else if (obj.containsKey(&quot;content&quot;) &amp;&amp; obj.containsKey(&quot;from&quot;) || obj.containsKey(&quot;dead&quot;) &amp;&amp; obj.get(&quot;from&quot;).equals(&quot;admin&quot;)) { for (Map.Entry&lt;String, Session&gt; entry : sessionMap.entrySet()) { if (!entry.getKey().equals(username)) { entry.getValue().getBasicRemote().sendText(message); } } } } @OnError public void onError(Session session, Throwable error) { log.error(&quot;发生错误&quot;); error.printStackTrace(); } /** * 服务端发送消息给客户端 */ private void sendMessage(String message, Session toSession) { try { log.info(&quot;服务端给客户端[{}]发送消息{}&quot;, toSession.getId(), message); toSession.getBasicRemote().sendText(message); } catch (Exception e) { log.error(&quot;服务端发送消息给客户端失败&quot;, e); } } /** * 服务端发送消息给所有客户端 */ private void sendAllMessage(String message) { try { for (Session session : sessionMap.values()) { log.info(&quot;服务端给客户端[{}]发送消息{}&quot;, session.getId(), message); session.getBasicRemote().sendText(message); } } catch (Exception e) { log.error(&quot;服务端发送消息给客户端失败&quot;, e); } } } 这里面认证会麻烦一些，shiro的注解都失效了。我这里实现了一个合作编辑的功能，可以聊天沟通，各方可以看到其他人的书写实时状态。当然，这个和真正的协作编辑还是有差别的，但是大多数场景都可以了，尤其是多人合作一篇论文这种场合。 1.7.2 spring的API 写了两套，这套比较适合正式场景。 package com.markerhub.config; import com.markerhub.shiro.JwtToken; import com.markerhub.util.JwtUtils; import io.jsonwebtoken.Claims; import lombok.NonNull; import org.apache.shiro.authc.AuthenticationException; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Configuration; import org.springframework.messaging.Message; import org.springframework.messaging.MessageChannel; import org.springframework.messaging.simp.config.ChannelRegistration; import org.springframework.messaging.simp.config.MessageBrokerRegistry; import org.springframework.messaging.simp.stomp.StompCommand; import org.springframework.messaging.simp.stomp.StompHeaderAccessor; import org.springframework.messaging.support.ChannelInterceptor; import org.springframework.messaging.support.MessageHeaderAccessor; import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker; import org.springframework.web.socket.config.annotation.StompEndpointRegistry; import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer; /** * @author mingchiuli * @create 2021-12-21 11:11 AM */ @Configuration @EnableWebSocketMessageBroker public class WebSocketConfig implements WebSocketMessageBrokerConfigurer{ JwtUtils jwtUtils; @Autowired public void setJwtUtils(JwtUtils jwtUtils) { this.jwtUtils = jwtUtils; } @Override public void registerStompEndpoints(StompEndpointRegistry registry) { registry.addEndpoint(&quot;/ws&quot;).setAllowedOriginPatterns(&quot;*&quot;).withSockJS(); } @Override public void configureMessageBroker(MessageBrokerRegistry registry) { registry.setApplicationDestinationPrefixes(&quot;/app&quot;); //客户端订阅消息的前缀 registry.enableSimpleBroker(&quot;/topic&quot;, &quot;/queue&quot;, &quot;/user&quot;); //用户级别订阅消息的前缀(默认已经配了) // registry.setUserDestinationPrefix(&quot;/user&quot;); } @Override public void configureClientInboundChannel(ChannelRegistration registration) { registration.interceptors(new ChannelInterceptor() { @Override public Message&lt;?&gt; preSend(@NonNull Message&lt;?&gt; message, @NonNull MessageChannel channel) { StompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class); if (accessor != null) { if (StompCommand.CONNECT.equals(accessor.getCommand())) { String token = accessor.getFirstNativeHeader(&quot;Authorization&quot;); //验证token是否有效 JwtToken jwtToken = new JwtToken(token); Claims claim = jwtUtils.getClaimByToken((String) jwtToken.getCredentials()); if (claim == null || jwtUtils.isTokenExpired(claim.getExpiration())){ throw new AuthenticationException(&quot;token验证失败&quot;); } } return message; } return null; } }); } } package com.markerhub.controller; import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper; import com.markerhub.common.lang.Const; import com.markerhub.entity.Content; import com.markerhub.entity.Message; import com.markerhub.entity.User; import com.markerhub.service.UserService; import com.markerhub.shiro.JwtToken; import com.markerhub.util.JwtUtils; import com.markerhub.util.MyUtils; import io.jsonwebtoken.Claims; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.messaging.handler.annotation.DestinationVariable; import org.springframework.messaging.handler.annotation.Headers; import org.springframework.messaging.handler.annotation.MessageMapping; import org.springframework.messaging.simp.SimpMessagingTemplate; import org.springframework.stereotype.Controller; import org.springframework.util.LinkedMultiValueMap; import java.util.ArrayList; import java.util.List; import java.util.Map; import java.util.concurrent.TimeUnit; /** * @author mingchiuli * @create 2021-12-27 7:03 PM */ @Controller @Slf4j public class WebSocketController { UserService userService; @Autowired public void setUserService(UserService userService) { this.userService = userService; } RedisTemplate&lt;String, Object&gt; redisTemplate; @Autowired public void setRedisTemplate(RedisTemplate&lt;String, Object&gt; redisTemplate) { this.redisTemplate = redisTemplate; } SimpMessagingTemplate simpMessagingTemplate; @Autowired public void setSimpMessagingTemplate(SimpMessagingTemplate simpMessagingTemplate) { this.simpMessagingTemplate = simpMessagingTemplate; } JwtUtils jwtUtils; @Autowired public void setJwtUtils(JwtUtils jwtUtils) { this.jwtUtils = jwtUtils; } @MessageMapping(&quot;/init/{blogId}&quot;) public synchronized void init(@Headers Map&lt;String, Object&gt; headers, @DestinationVariable Long blogId) { LinkedMultiValueMap&lt;String, String&gt; map = (LinkedMultiValueMap&lt;String, String&gt;) headers.get(&quot;nativeHeaders&quot;); List&lt;String&gt; authorization = map.get(&quot;Authorization&quot;); if (authorization != null) { String token = authorization.get(0); JwtToken jwtToken = new JwtToken(token); Claims claim = jwtUtils.getClaimByToken((String) jwtToken.getCredentials()); String userId = claim.getSubject(); User user = userService.getBaseMapper().selectOne(new QueryWrapper&lt;User&gt;().eq(&quot;id&quot;, userId).select(&quot;id&quot;, &quot;username&quot;, &quot;avatar&quot;)); user.setNumber(redisTemplate.opsForHash().size(Const.WS_PREFIX + blogId)); redisTemplate.expire(Const.WS_PREFIX + blogId, 4 * 60, TimeUnit.MINUTES); if (!redisTemplate.opsForHash().hasKey(Const.WS_PREFIX + blogId, userId)) { redisTemplate.opsForHash().put(Const.WS_PREFIX + blogId, userId, user); } Map&lt;Object, Object&gt; entries = redisTemplate.opsForHash().entries(Const.WS_PREFIX + blogId); ArrayList&lt;User&gt; users = new ArrayList&lt;&gt;(); for (Map.Entry&lt;Object, Object&gt; entry : entries.entrySet()) { User value = MyUtils.jsonToObj(entry.getValue(), User.class); users.add(value); } simpMessagingTemplate.convertAndSendToUser(blogId.toString(),&quot;/topic/users&quot;, users); log.info(&quot;{}号用户加入{}号编辑室&quot;, userId, blogId); } } @MessageMapping(&quot;/destroy/{blogId}&quot;) public void destroy(@Headers Map&lt;String, Object&gt; headers, @DestinationVariable Long blogId) { LinkedMultiValueMap&lt;String, String&gt; map = (LinkedMultiValueMap&lt;String, String&gt;) headers.get(&quot;nativeHeaders&quot;); List&lt;String&gt; authorization = map.get(&quot;Authorization&quot;); if (authorization != null) { String token = authorization.get(0); JwtToken jwtToken = new JwtToken(token); Claims claim = jwtUtils.getClaimByToken((String) jwtToken.getCredentials()); String userId = claim.getSubject(); redisTemplate.opsForHash().delete(Const.WS_PREFIX + blogId, userId); Map&lt;Object, Object&gt; entries = redisTemplate.opsForHash().entries(Const.WS_PREFIX + blogId); ArrayList&lt;User&gt; users = new ArrayList&lt;&gt;(); for (Map.Entry&lt;Object, Object&gt; entry : entries.entrySet()) { User value = MyUtils.jsonToObj(entry.getValue(), User.class); users.add(value); } simpMessagingTemplate.convertAndSendToUser(blogId.toString(),&quot;/topic/users&quot;, users); log.info(&quot;{}号用户退出编辑室&quot;, userId); } } @MessageMapping(&quot;/chat/{from}/{to}&quot;) public void chat(String msg, @DestinationVariable String from, @DestinationVariable Long to) { Message message = new Message(); message.setMessage(msg); message.setFrom(from); message.setTo(to); simpMessagingTemplate.convertAndSendToUser(to.toString(), &quot;/queue/chat&quot;, message); } @MessageMapping(&quot;/sync/{from}&quot;) public void syncContent(@DestinationVariable Long from, String content) { Content msg = new Content(); msg.setContent(content); msg.setFrom(from); simpMessagingTemplate.convertAndSend(&quot;/topic/content&quot;, msg); } @MessageMapping(&quot;/taskOver/{from}&quot;) public void taskOver(@DestinationVariable Long from) { simpMessagingTemplate.convertAndSend(&quot;/topic/over&quot;, from); } } 1.8 统一缓存和统一异常处理 package com.markerhub.common.cache; import java.lang.annotation.*; /** * @author mingchiuli * @create 2021-12-01 7:45 AM */ @Target({ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface Cache { long expire() default 120 * 1000; String name() default &quot;&quot;; } package com.markerhub.common.cache; import cn.hutool.crypto.digest.DigestUtil; import com.fasterxml.jackson.databind.ObjectMapper; import com.markerhub.common.lang.Result; import lombok.SneakyThrows; import lombok.extern.slf4j.Slf4j; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.Signature; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.stereotype.Component; import org.springframework.util.StringUtils; import java.lang.reflect.Method; import java.time.Duration; import java.util.Arrays; import java.util.LinkedHashMap; /** * 统一缓存处理 * @author mingchiuli * @create 2021-12-01 7:48 AM */ @Aspect @Component @Slf4j public class CacheAspect { RedisTemplate&lt;String, Object&gt; redisTemplate; @Autowired private void setRedisTemplateImpl(RedisTemplate&lt;String, Object&gt; redisTemplate) { this.redisTemplate = redisTemplate; } @Pointcut(&quot;@annotation(com.markerhub.common.cache.Cache)&quot;) public void pt() {} @SneakyThrows @Around(&quot;pt()&quot;) public Object around(ProceedingJoinPoint pjp) { Signature signature = pjp.getSignature(); //类名 String className = pjp.getTarget().getClass().getSimpleName(); //调用的方法名 String methodName = signature.getName(); Class[] parameterTypes = new Class[pjp.getArgs().length]; Object[] args = pjp.getArgs(); //参数 StringBuilder params = new StringBuilder(); ObjectMapper objectMapper = new ObjectMapper(); for (int i = 0; i &lt; args.length; i++) { if (args[i] != null) { params.append(objectMapper.writeValueAsString(args[i])); parameterTypes[i] = args[i].getClass(); } else { parameterTypes[i] = null; } } if (StringUtils.hasLength(params.toString())) { params = new StringBuilder(Arrays.toString(DigestUtil.md5(params.toString()))); } Method method = pjp.getSignature().getDeclaringType().getMethod(methodName, parameterTypes); Cache annotation = method.getAnnotation(Cache.class); long expire = annotation.expire(); String name = annotation.name(); String redisKey = name + &quot;::&quot; + className + &quot;::&quot; + methodName + &quot;::&quot; + params; LinkedHashMap&lt;String, Object&gt; redisValue = (LinkedHashMap&lt;String, Object&gt;) redisTemplate.opsForValue().get(redisKey); Result result = objectMapper.convertValue(redisValue, Result.class); if (result != null) { log.info(&quot;走了缓存, {}, {}&quot;, className, methodName); return result; } log.info(&quot;执行目标方法{}&quot;, methodName); Object proceed = pjp.proceed(); redisTemplate.opsForValue().set(redisKey, proceed, Duration.ofMillis(expire)); log.info(&quot;存入缓存, {}, {}&quot;, className, methodName); return proceed; } } package com.markerhub.common.exception; import com.markerhub.common.lang.Result; import lombok.extern.slf4j.Slf4j; import org.apache.shiro.ShiroException; import org.apache.shiro.authc.ExpiredCredentialsException; import org.elasticsearch.client.tasks.ElasticsearchException; import org.springframework.http.HttpStatus; import org.springframework.validation.BindingResult; import org.springframework.validation.ObjectError; import org.springframework.web.bind.MethodArgumentNotValidException; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.bind.annotation.RestControllerAdvice; import javax.servlet.ServletException; /** * @author mingchiuli * @create 2021-10-27 9:29 PM */ @Slf4j @RestControllerAdvice public class GlobalExceptionHandler { @ResponseStatus(HttpStatus.UNAUTHORIZED) @ExceptionHandler(value = ShiroException.class) public Result handler(ShiroException e) { log.error(&quot;权限异常------------{}&quot;, e); return Result.fail(401, e.getMessage(), null); } @ResponseStatus(HttpStatus.BAD_REQUEST) @ExceptionHandler(value = RuntimeException.class) public Result handler(RuntimeException e) { log.error(&quot;运行时异常------------{}&quot;, e); return Result.fail(e.getMessage()); } @ResponseStatus(HttpStatus.BAD_REQUEST) @ExceptionHandler(value = MethodArgumentNotValidException.class) public Result handler(MethodArgumentNotValidException e) { log.error(&quot;实体校验异常------------{}&quot;, e); BindingResult bindingResult = e.getBindingResult(); ObjectError objectError = bindingResult.getAllErrors().stream().findFirst().get(); return Result.fail(objectError.getDefaultMessage()); } @ResponseStatus(HttpStatus.BAD_REQUEST) @ExceptionHandler(value = IllegalArgumentException.class) public Result handler(IllegalArgumentException e) { log.error(&quot;Assert断言异常------------{}&quot;, e); return Result.fail(e.getMessage()); } } 1.9 其他部分 package com.markerhub.config; import com.google.code.kaptcha.impl.DefaultKaptcha; import com.google.code.kaptcha.util.Config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import java.util.Properties; import java.util.concurrent.TimeUnit; /** * @author mingchiuli * @create 2021-12-14 11:52 AM */ @Configuration public class KaptchaConfig { @Bean DefaultKaptcha producer() { Properties properties = new Properties(); properties.put(&quot;kaptcha.border&quot;, &quot;no&quot;); properties.put(&quot;kaptcha.textproducer.font.color&quot;, &quot;black&quot;); properties.put(&quot;kaptcha.textproducer.char.space&quot;, &quot;4&quot;); properties.put(&quot;kaptcha.image.height&quot;, &quot;40&quot;); properties.put(&quot;kaptcha.image.width&quot;, &quot;120&quot;); properties.put(&quot;kaptcha.textproducer.font.size&quot;, &quot;30&quot;); Config config = new Config(properties); DefaultKaptcha defaultKaptcha = new DefaultKaptcha(); defaultKaptcha.setConfig(config); return defaultKaptcha; } } package com.markerhub.config; import com.baomidou.mybatisplus.annotation.DbType; import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor; import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor; import org.mybatis.spring.annotation.MapperScan; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.transaction.annotation.EnableTransactionManagement; /** * 分页拦截器 * @author mingchiuli * @create 2021-10-27 2:39 PM */ @Configuration @EnableTransactionManagement @MapperScan(&quot;com.markerhub.mapper&quot;) public class MyBatisPlusConfig { @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL)); return interceptor; } } package com.markerhub.config; import org.springframework.context.annotation.Configuration; import org.springframework.web.servlet.config.annotation.CorsRegistry; import org.springframework.web.servlet.config.annotation.InterceptorRegistry; import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; /** * @author mingchiuli * @create 2021-11-06 6:24 PM */ @Configuration public class WebMvcConfig implements WebMvcConfigurer { /** * 文件上传处理，URL映射到本地磁盘路径 * @param registry */ @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { //测试环境 // registry.addResourceHandler(&quot;/upload/**&quot;).addResourceLocations(&quot;file:/users/mingchiuli/desktop/&quot;); // 服务器环境 registry.addResourceHandler(&quot;/upload/**&quot;).addResourceLocations(&quot;file:/usr/local/vueblogresources/&quot;); } /** * 解决跨域问题 * @param registry */ @Override public void addCorsMappings(CorsRegistry registry) { registry.addMapping(&quot;/**&quot;) .allowedOriginPatterns(&quot;*&quot;) .allowedMethods(&quot;GET&quot;, &quot;HEAD&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;) .allowCredentials(true) .maxAge(3600) .allowedHeaders(&quot;*&quot;); } } package com.markerhub.common.dto; import lombok.Data; import javax.validation.constraints.NotBlank; import java.io.Serializable; @Data public class LoginDto implements Serializable { @NotBlank(message = &quot;昵称不能为空&quot;) private String username; @NotBlank(message = &quot;密码不能为空&quot;) private String password; @NotBlank(message = &quot;验证码异常&quot;) private String token; @NotBlank(message = &quot;验证码异常&quot;) private String code; } package com.markerhub.common.dto; import lombok.Data; import javax.validation.constraints.NotBlank; /** * @author mingchiuli * @create 2021-12-14 2:08 PM */ @Data public class PasswordDto { @NotBlank(message = &quot;昵称不能为空&quot;) private String username; @NotBlank(message = &quot;密码不能为空&quot;) private String password; } package com.markerhub.common.lang; /** * @author mingchiuli * @create 2021-12-14 11:58 AM */ public class Const { public final static String CAPTCHA_KEY = &quot;captcha&quot;; public final static String USER_PREFIX = &quot;user:&quot;; public final static String USER_OBJECT = &quot;userObj&quot;; public final static String TOKEN = &quot;token&quot;; public final static String READ_SUM = &quot;blogsReadSum&quot;; public final static String READ_RECENT = &quot;blogReadRecent:&quot;; public final static String HOT_PREFIX = &quot;hot_blogs&quot;; //url相关，不相关上传路径 public final static String UPLOAD_IMG_PATH = &quot;/upload/img/&quot;; public static final String ROLE_PREFIX = &quot;role:&quot;; } package com.markerhub.common.lang; import lombok.Data; import java.io.Serializable; /** * @author mingchiuli * @create 2021-10-27 3:27 PM */ @Data public class Result implements Serializable { private int code; private String msg; private Object data; public static Result succ(Object data) { return load(200, &quot;操作成功&quot;,data); //200为正常，非200为非正常 } private static Result load(int code, String msg, Object data) { Result r = new Result(); r.setCode(code); r.setData(data); r.setMsg(msg); return r; } public static Result fail(Integer code, String msg, Object data) { return load(code, msg, data); } public static Result fail(String msg) { return load(400, msg, null); } } 1.10 日志监控 打一条日志就往rabbitmq灌一条，然后ws输出到网页上。 package com.markerhub.log.mq; import com.markerhub.config.RabbitConfig; import lombok.extern.slf4j.Slf4j; import org.springframework.amqp.rabbit.annotation.RabbitListener; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.messaging.simp.SimpMessagingTemplate; import org.springframework.stereotype.Component; /** * logback日志内容塞到rabbitmq队列里 * @author mingchiuli * @create 2022-01-03 8:56 PM */ @Slf4j @Component public class LogMessageHandler { SimpMessagingTemplate simpMessagingTemplate; @Autowired public void setSimpMessagingTemplate(SimpMessagingTemplate simpMessagingTemplate) { this.simpMessagingTemplate = simpMessagingTemplate; } @RabbitListener(id = &quot;log&quot;, queues = RabbitConfig.LOG_QUEUE, autoStartup = &quot;false&quot;) public void processMessage(String msg) { simpMessagingTemplate.convertAndSend(&quot;/logs/log&quot;, msg); } } package com.markerhub.controller; import lombok.extern.slf4j.Slf4j; import org.springframework.amqp.rabbit.listener.MessageListenerContainer; import org.springframework.amqp.rabbit.listener.RabbitListenerEndpointRegistry; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.messaging.handler.annotation.MessageMapping; import org.springframework.stereotype.Controller; /** * @author mingchiuli * @create 2022-01-04 4:35 PM */ @Controller @Slf4j public class LogController { RabbitListenerEndpointRegistry registry; @Autowired public void setRegistry(RabbitListenerEndpointRegistry registry) { this.registry = registry; } @MessageMapping(&quot;/startMQ&quot;) public void start() { MessageListenerContainer logContainer = registry.getListenerContainer(&quot;log&quot;); if (!logContainer.isRunning()) { logContainer.start(); } log.info(&quot;消息队列日志监听器已开启&quot;); } @MessageMapping(&quot;/stopMQ&quot;) public void stop() { MessageListenerContainer logContainer = registry.getListenerContainer(&quot;log&quot;); if (logContainer.isRunning()) { logContainer.stop(); } log.info(&quot;消息队列日志监听器已关闭&quot;); } } package com.markerhub.config; import org.springframework.amqp.core.Binding; import org.springframework.amqp.core.BindingBuilder; import org.springframework.amqp.core.DirectExchange; import org.springframework.amqp.core.Queue; import org.springframework.amqp.rabbit.listener.RabbitListenerEndpointRegistry; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; /** * RabbitMQ * 作用是同步ES * 和 * 将日志输出到MQ * * @author mingchiuli * @create 2021-12-12 11:22 PM */ @Configuration public class RabbitConfig { public static final String ES_QUEUE = &quot;ex_queue&quot;; public static final String ES_EXCHANGE = &quot;ex_exchange&quot;; public static final String ES_BINDING_KEY = &quot;ex_exchange&quot;; public static final String LOG_QUEUE = &quot;log_queue&quot;; public static final String LOG_EXCHANGE = &quot;log_exchange&quot;; public static final String LOG_BINDING_KEY = &quot;log_exchange&quot;; //ES队列 @Bean(&quot;ES_QUEUE&quot;) public Queue esQueue() { return new Queue(ES_QUEUE); } //ES交换机 @Bean(&quot;ES_EXCHANGE&quot;) public DirectExchange esExchange() { return new DirectExchange(ES_EXCHANGE); } //绑定ES队列和ES交换机 @Bean public Binding esBinding(@Qualifier(&quot;ES_QUEUE&quot;) Queue esQueue, @Qualifier(&quot;ES_EXCHANGE&quot;) DirectExchange esExchange) { return BindingBuilder.bind(esQueue).to(esExchange).with(ES_BINDING_KEY); } //LOG队列 @Bean(&quot;LOG_QUEUE&quot;) public Queue logQueue() { return new Queue(LOG_QUEUE); } //LOG交换机 @Bean(&quot;LOG_EXCHANGE&quot;) public DirectExchange logExchange() { return new DirectExchange(LOG_EXCHANGE); } //绑定LOG队列和LOG交换机 @Bean public Binding LogBinding(@Qualifier(&quot;LOG_QUEUE&quot;) Queue logQueue, @Qualifier(&quot;LOG_EXCHANGE&quot;) DirectExchange logExchange) { return BindingBuilder.bind(logQueue).to(logExchange).with(LOG_BINDING_KEY); } } "],["front.html", "第 2 章 前端 2.1 components 2.2 router 2.3 vuex 2.4 other 2.5 axios 2.6 main 2.7 permission", " 第 2 章 前端 2.1 components 补充日志监控的模块： &lt;template&gt; &lt;el-card class=&quot;box-card&quot;&gt; &lt;div slot=&quot;header&quot; class=&quot;clearfix&quot;&gt; &lt;span style=&quot;font-size: large&quot;&gt;Spring-logback后台日志&lt;/span&gt; &lt;el-button id=&quot;tag-copy&quot; :data-clipboard-text=&quot;msg&quot; style=&quot;float: right; padding: 0.5% 0&quot; type=&quot;text&quot; @click=&quot;copy($event,msg)&quot;&gt;复制日志&lt;/el-button&gt; &lt;/div&gt; &lt;div v-html=&quot;msg&quot; class=&quot;text-item&quot;&gt; {{ msg }} &lt;/div&gt; &lt;/el-card&gt; &lt;/template&gt; &lt;script&gt; let stompClient import Clipboard from &#39;clipboard&#39;; import SockJS from &#39;sockjs-client&#39;; import {Client} from &#39;@stomp/stompjs&#39;; export default { name: &quot;SystemLogs&quot;, data() { return { msg: &#39;&#39; } }, created() { this.initWebSocket(); }, methods: { copy() { const clipboard = new Clipboard(&quot;#tag-copy&quot;) clipboard.on(&#39;success&#39;, e =&gt; { this.$message({ type: &#39;success&#39;, message: &#39;复制成功&#39; }) // 释放内存 clipboard.destroy() }) clipboard.on(&#39;error&#39;, e =&gt; { // 不支持复制 this.$message({ type: &#39;warning&#39;, message: &#39;该浏览器不支持自动复制&#39; }) // 释放内存 clipboard.destroy() }) }, initWebSocket() { this.connectWebSocket(); this.webSocketTimer = setInterval(() =&gt; { if (!stompClient.connected) { console.log(&quot;websocket重连中 ...&quot;); this.connectWebSocket(); } }, 10000); }, connectWebSocket() { const _this = this stompClient = new Client({ connectHeaders: {&quot;Authorization&quot;: sessionStorage.getItem(&quot;myToken&quot;)}, debug: function (str) { //debug日志，调试时候开启 console.log(str); }, reconnectDelay: 10000,//重连时间 heartbeatIncoming: 4000, heartbeatOutgoing: 4000, }); stompClient.webSocketFactory = function () { //因为服务端监听的是/sysLog路径下面的请求，所以跟服务端保持一致 // return new SockJS(&quot;http://127.0.0.1:8081&quot; + &#39;/sysLog&#39;, null, { return new SockJS(&quot;http://119.91.233.182:8081&quot; + &#39;/sysLog&#39;, null, { timeout: 10000 }); }; stompClient.onConnect = (frame) =&gt; { stompClient.publish({ destination: &#39;/app/startMQ&#39; }) stompClient.subscribe(&#39;/logs/log&#39;, (res) =&gt; { _this.msg += res.body + &#39;&lt;br&gt;&#39; }); }; stompClient.onStompError = function (frame) { // Will be invoked in case of error encountered at Broker // Bad login/passcode typically will cause an error // Complaint brokers will set `message` header with a brief message. Body may contain details. // Compliant brokers will terminate the connection after any error console.log(&#39;Broker reported error: &#39; + frame.headers[&#39;message&#39;]); console.log(&#39;Additional details: &#39; + frame.body); }; stompClient.activate(); }, disconnectWebSocket() { if (stompClient !== null) { stompClient.publish({ destination: &#39;/app/stopMQ&#39; }) stompClient.deactivate() } }, }, destroyed: function () { clearInterval(this.webSocketTimer); this.disconnectWebSocket(); }, } &lt;/script&gt; &lt;style scoped&gt; &lt;/style&gt; 这部分主要分为博客后台和博客前台的部分。 &lt;template&gt; &lt;div&gt; &lt;strong&gt;后台管理系统&lt;/strong&gt; &lt;div class=&quot;header-avatar&quot;&gt; &lt;el-avatar size=&quot;medium&quot; :src=&quot;avatar&quot;&gt;&lt;/el-avatar&gt; &lt;el-dropdown&gt; &lt;span class=&quot;el-dropdown-link&quot;&gt; {{username}}&lt;i class=&quot;el-icon-arrow-down el-icon--right&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt; &lt;!-- &lt;el-dropdown-item&gt;回到首页&lt;/el-dropdown-item&gt;--&gt; &lt;el-dropdown-item @click.native=&quot;logout&quot;&gt;退出&lt;/el-dropdown-item&gt; &lt;/el-dropdown-menu&gt; &lt;/el-dropdown&gt; &lt;el-link href=&quot;/blogs/1&quot;&gt;回到首页&lt;/el-link&gt; &lt;!-- &lt;el-link href=&quot;https://space.bilibili.com/13491144&quot; target=&quot;_blank&quot;&gt;B站&lt;/el-link&gt;--&gt; &lt;/div&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { name: &quot;BackHeader&quot;, data() { return { avatar: &#39;&#39;, username: &#39;&#39; } }, methods: { logout() { const _this = this _this.$axios.get(&quot;/logout&quot;, { headers: { &quot;Authorization&quot;: sessionStorage.getItem(&quot;myToken&quot;) } }).then(res =&gt; { _this.$store.commit(&quot;REMOVE_INFO&quot;) // _this.$router.push(&#39;/blogs/1&#39;) _this.$router.push({name: &#39;Blogs&#39;, params: {currentPage: &#39;1&#39;}}) location.reload() }) } }, created() { this.avatar = this.$store.state.myUserInfo.avatar this.username = this.$store.state.myUserInfo.username } } &lt;/script&gt; &lt;style scoped&gt; .header-avatar { float: right; /*width: 210px;*/ width: 19%; display: flex; justify-content: space-around; align-items: center; } .el-dropdown-link { cursor: pointer; } &lt;/style&gt; &lt;template&gt; &lt;div&gt; &lt;el-row style=&quot;position: fixed&quot;&gt; &lt;el-col :span=&quot;30&quot; style=&quot;width: 120%&quot;&gt; &lt;!-- &lt;h4 style=&quot;margin-top: -70px; margin-bottom: -70px; margin-left: 30px&quot;&gt;BackStage Index&lt;/h4&gt;--&gt; &lt;h4 style=&quot;margin-top: -50%; margin-bottom: -30%; margin-left: 15%; width: 25%;color: #333333&quot;&gt;BackStage&lt;/h4&gt; &lt;el-menu :default-active=&quot;this.$store.state.menus.editableTabsValue&quot; class=&quot;el-menu-vertical-demo&quot; @close=&quot;handleClose&quot; ref=&quot;menu&quot; active-text-color=&quot;#ffd04b&quot;&gt; &lt;el-submenu index=&quot;1&quot;&gt; &lt;template slot=&quot;title&quot;&gt; &lt;i class=&quot;el-icon-setting&quot;&gt;&lt;/i&gt; &lt;span&gt;系统管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;SystemIndex&quot; @click=&quot;selectMenu({name: &#39;SystemIndex&#39;, title: &#39;访问统计&#39;})&quot;&gt;&lt;i class=&quot;el-icon-location&quot;&gt;&lt;/i&gt;访问统计&lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;SystemUsers&quot; @click=&quot;selectMenu({name: &#39;SystemUsers&#39;, title: &#39;账号管理&#39;})&quot;&gt;&lt;i class=&quot;el-icon-user&quot;&gt;&lt;/i&gt;账号管理&lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;SystemBlogs&quot; @click=&quot;selectMenu({name: &#39;SystemBlogs&#39;, title: &#39;日志管理&#39;})&quot;&gt;&lt;i class=&quot;el-icon-edit-outline&quot;&gt;&lt;/i&gt;日志管理&lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;SystemDeleted&quot; @click=&quot;selectMenu({name: &#39;SystemDeleted&#39;, title: &#39;删除管理&#39;})&quot;&gt;&lt;i class=&quot;el-icon-delete&quot;&gt;&lt;/i&gt;删除管理&lt;/el-menu-item&gt; &lt;/el-submenu&gt; &lt;el-submenu index=&quot;2&quot;&gt; &lt;template slot=&quot;title&quot;&gt; &lt;i class=&quot;el-icon-magic-stick&quot;&gt;&lt;/i&gt; &lt;span&gt;工具管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;SystemBooks&quot; @click=&quot;selectMenu({name: &#39;SystemBooks&#39;, title: &#39;书籍下载&#39;})&quot;&gt;&lt;i class=&quot;el-icon-download&quot;&gt;&lt;/i&gt;书籍下载&lt;/el-menu-item&gt; &lt;/el-submenu&gt; &lt;/el-menu&gt; &lt;/el-col&gt; &lt;/el-row&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { name: &quot;SideMenu&quot;, methods: { selectMenu(item) { this.$store.commit(&quot;addTab&quot;, item) this.$router.push({name: item.name}) }, handleClose(key, keyPath) { this.$refs.menu.open(keyPath) console.log(key, keyPath); } }, computed: { menuList: { get() { return this.$store.state.menus.menuList } } } } &lt;/script&gt; &lt;style scoped&gt; &lt;/style&gt; &lt;template&gt; &lt;div&gt; &lt;el-tabs v-model=&quot;editableTabsValue&quot; type=&quot;card&quot; closable @tab-remove=&quot;removeTab&quot; @tab-click=&quot;clickTab&quot;&gt; &lt;el-tab-pane v-for=&quot;(item, index) in editableTabs&quot; :key=&quot;item.name&quot; :label=&quot;item.title&quot; :name=&quot;item.name&quot;&gt; &lt;/el-tab-pane&gt; &lt;/el-tabs&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { name: &quot;Tabs&quot;, methods: { removeTab(targetName) { let tabs = this.editableTabs; let activeName = this.editableTabsValue; if (tabs.length === 1) { return } // if (activeName === &#39;SystemIndex&#39;) { // return // } if (activeName === targetName) { tabs.forEach((tab, index) =&gt; { if (tab.name === targetName) { let nextTab = tabs[index + 1] || tabs[index - 1]; if (nextTab) { activeName = nextTab.name; } } }); } this.editableTabsValue = activeName; this.editableTabs = tabs.filter(tab =&gt; tab.name !== targetName); this.$router.push({name: activeName}) }, clickTab (target) { this.$router.push({name: target.name}) } }, computed: { editableTabs: { get() { return this.$store.state.menus.editableTabs }, set(val) { this.$store.state.menus.editableTabs = val } }, editableTabsValue: { get() { return this.$store.state.menus.editableTabsValue }, set(val) { this.$store.state.menus.editableTabsValue = val } } }, } &lt;/script&gt; &lt;style scoped&gt; &lt;/style&gt; &lt;template&gt; &lt;div class=&quot;gitalk-container&quot;&gt; &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; import &#39;gitalk/dist/gitalk.css&#39; import Gitalk from &#39;gitalk&#39; import md5 from &#39;blueimp-md5&#39; export default { name: &quot;comment&quot;, mounted() { const commentConfig = { clientID: &#39;&#39;, clientSecret: &#39;&#39;, repo: &#39;GitalkDemo&#39;, owner: &#39;mingchiuli&#39;, admin: [&#39;mingchiuli&#39;], id: md5(location.pathname) }; const gitalk = new Gitalk(commentConfig); gitalk.render(&#39;gitalk-container&#39;) } } &lt;/script&gt; &lt;style scoped&gt; &lt;/style&gt; 评论用了个前端组件，没做这个系统。 &lt;template&gt; &lt;div class=&quot;footer&quot;&gt; &lt;hr&gt; &lt;div class=&quot;copyright&quot;&gt;&amp;copy; &lt;a href=&quot;/&quot;&gt; MingChiu Li &lt;/a&gt; 2021-2022 &lt;/div&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { name: &quot;Footer&quot; } &lt;/script&gt; &lt;style scoped&gt; .footer { margin-top: 7%; } hr { display: block; height: 1px; border: 0; border-top: 1px solid; /*margin: 50px auto;*/ margin: 5% auto; padding: 0; /*max-width: 300px;*/ max-width: 30%; color: lightgray; } .copyright { /*margin-bottom: 30px;*/ margin-bottom: 3%; text-align: center; font-size: 17px; } a { text-decoration: none; color: black; font-family: &quot;Brush Script MT&quot;,serif; font-size: 20px; } &lt;/style&gt; &lt;template&gt; &lt;div class=&quot;m-content&quot;&gt; &lt;h1&gt;日志&lt;/h1&gt; &lt;hr&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { name: &quot;Header&quot;, } &lt;/script&gt; &lt;style scoped&gt; /*.m-content {*/ /* !*max-width: 960px;*!*/ /* max-width: 100%;*/ /* margin: 0 auto;*/ /* text-align: center;*/ /*}*/ h1 { font-size: xx-large; /*margin-top: 20px;*/ margin-top: 2%; /*margin-bottom: 60px;*/ margin-bottom: 5%; } hr { display: block; height: 1px; border: 0; border-top: 1px solid; /*margin: 50px auto;*/ margin: 5% auto; padding: 0; /*max-width: 300px;*/ max-width: 30%; color: lightgray; } &lt;/style&gt; &lt;template&gt; &lt;div class=&quot;maction&quot;&gt; &lt;div v-if=&quot;hasLogin&quot;&gt; &lt;span&gt;&lt;el-link href=&quot;/blogs/1&quot; type=&quot;primary&quot; style=&quot;font-size: large&quot;&gt;主页&lt;/el-link&gt;&lt;/span&gt; &lt;el-divider direction=&quot;vertical&quot;&gt;&lt;/el-divider&gt; &lt;span&gt;&lt;el-link type=&quot;success&quot; href=&quot;/blog/add&quot; style=&quot;font-size: large&quot;&gt;发表博客&lt;/el-link&gt;&lt;/span&gt; &lt;el-divider direction=&quot;vertical&quot;&gt;&lt;/el-divider&gt; &lt;span&gt;&lt;el-link type=&quot;warning&quot; href=&quot;/sys/&quot; style=&quot;font-size: large&quot;&gt;进入后台&lt;/el-link&gt;&lt;/span&gt; &lt;el-divider direction=&quot;vertical&quot;&gt;&lt;/el-divider&gt; &lt;!-- &lt;span v-show=&quot;!hasLogin&quot;&gt;&lt;el-link type=&quot;primary&quot; href=&quot;/login&quot;&gt;登录&lt;/el-link&gt;&lt;/span&gt;--&gt; &lt;span&gt;&lt;el-link type=&quot;danger&quot; @click=&quot;logout&quot; style=&quot;font-size: large&quot;&gt;退出&lt;/el-link&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { name: &quot;LoginStatus&quot;, data() { return { user: { username: &#39;&#39;, avatar: &#39;http://src.onlinedown.net/new_img/apk_logo/2016/0714/7970f582660bc6158468a43caf8ffd19-for-11723-o_1anjnodvrvm1rteqck1t3u3q6q-uid-12202.png&#39; }, hasLogin: false } }, methods: { logout() { const _this = this _this.$axios.get(&quot;/logout&quot;, { headers: { &quot;Authorization&quot;: sessionStorage.getItem(&quot;myToken&quot;) } }).then(res =&gt; { _this.$store.commit(&quot;REMOVE_INFO&quot;) // _this.$router.push(&quot;/login&quot;) location.reload() }) } }, created() { if(this.$store.getters.getUser) { this.user.username = this.$store.getters.getUser.username this.user.avatar = this.$store.getters.getUser.avatar this.hasLogin = true } } } &lt;/script&gt; &lt;style scoped&gt; .maction { /*margin: 10px 0;*/ margin: 3% 0; text-align: center; } &lt;/style&gt; &lt;template&gt; &lt;div style=&quot;text-align: center&quot;&gt; &lt;a href=&#39;https://clustrmaps.com/site/1blip&#39; target=&quot;_blank&quot; title=&#39;Visit tracker&#39;&gt;&lt;img src=&#39;//clustrmaps.com/map_v2.png?cl=ffffff&amp;w=729&amp;t=m&amp;d=x2KNqPs-M20ry9WTeYNyWAUP7Vujo7irGvbPq40ZI0s&amp;co=2d78ad&amp;ct=ffffff&#39;/&gt;&lt;/a&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { name: &quot;Map&quot;, } &lt;/script&gt; &lt;style scoped&gt; &lt;/style&gt; &lt;template&gt; &lt;div&gt; &lt;!-- &lt;div class=&quot;myItem&quot;&gt;--&gt; &lt;el-button @click=&quot;drawer = true&quot; type=&quot;primary&quot; style=&quot;margin-left: -10%;margin-top: 5px;background: #0bbd87; border: #ccd8ff;font-size: smaller; &quot; icon=&quot;el-icon-s-operation&quot;&gt;&lt;/el-button&gt; &lt;!-- &lt;el-input--&gt; &lt;!-- placeholder=&quot;请输入内容&quot;--&gt; &lt;!-- v-model=&quot;input&quot;--&gt; &lt;!-- clearable style=&quot;width: 20%;margin-top: 5px;margin-left: 105%;margin-right: -26%&quot;&gt;--&gt; &lt;!-- &lt;/el-input&gt;--&gt; &lt;!-- &lt;el-button @click=&quot;drawer = true&quot; type=&quot;primary&quot; style=&quot;margin-top: 5px;background: #0bbd87; border: #ccd8ff;&quot; icon=&quot;el-icon-search&quot;&gt;&lt;/el-button&gt;--&gt; &lt;!-- &lt;/div&gt;--&gt; &lt;el-drawer title=&quot;Blog Index&quot; :visible.sync=&quot;drawer&quot; :direction=&quot;direction&quot; size=&quot;16%&quot; :before-close=&quot;handleClose&quot;&gt; &lt;el-tree :data=&quot;data&quot; :props=&quot;defaultProps&quot; accordion @node-click=&quot;handleNodeClick&quot;&gt; &lt;/el-tree&gt; &lt;/el-drawer&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { name: &quot;Sider&quot;, data() { return { input: &#39;&#39;, drawer: false, direction: &#39;ltr&#39;, data: [{ label: &#39;关于&#39;, }, { label: &#39;日志&#39;, },{ label: &#39;归档&#39;, children: [{ label: &#39;2022&#39; } ,{ label: &#39;2021&#39; } ] }, { label: &#39;简历&#39; }, { label: &#39;更新&#39; }, { label: &#39;代码&#39; } , { label: &#39;mla&#39; } , { label: &#39;版权&#39; }], defaultProps: { children: &#39;children&#39;, label: &#39;label&#39; } }; }, methods: { handleClose(done) { done() }, handleNodeClick(data) { console.log(data); switch (data.label) { case &#39;2022&#39;: this.$router.push(&quot;/blogsByYear/2022/1&quot;) this.drawer = false break case &#39;2021&#39;: this.$router.push(&quot;/blogsByYear/2021/1&quot;) this.drawer = false break case &#39;日志&#39;: this.$router.push(&quot;/blogs/1&quot;) this.drawer = false break case &#39;关于&#39;: this.$router.push(&quot;/&quot;) break case &#39;简历&#39;: this.$router.push(&quot;/other/1&quot;) this.drawer = false break case &#39;mla&#39;: window.open().location.href = &#39;/mla.html&#39;; this.drawer = false break case &#39;更新&#39;: this.$router.push(&quot;/other/0&quot;) this.drawer = false break case &#39;版权&#39;: window.open().location.href = &#39;https://creativecommons.org/licenses/by-nc-sa/4.0/&#39;; this.drawer = false break case &#39;代码&#39;: window.open().location.href = &#39;/_book/index.html&#39;; this.drawer = false } } }, //同一个组件，路由改变时如果内容不变，如此解决 watch: { $route(to,from){ // created:{}里面的方法 } } }; &lt;/script&gt; &lt;style&gt; .el-drawer__header { font-size: 20px; } .el-drawer__body { overflow: auto; } .el-tree-node:hover&gt;.el-tree-node__content { background-color: #fff; color: deepskyblue; } .el-tree-node__content { height: 45px !important; font-size: xx-large; } span.el-tree-node__label { font-size: 16px; } /*.myItem {*/ /* !*位于一行*!*/ /* display: flex;*/ /* flex-direction: row;*/ /*}*/ &lt;/style&gt; 2.2 router import Vue from &#39;vue&#39; import Login from &#39;../views/Login.vue&#39; import Blogs from &#39;../views/Blogs.vue&#39; import BlogEdit from &#39;../views/BlogEdit.vue&#39; import BlogDetail from &#39;../views/BlogDetail.vue&#39; import Intro from &#39;../views/Intro.vue&#39; import Resume from &quot;@/views/Resume&quot;; import Footer from &quot;@/components/Footer&quot;; import System from &quot;../views/System&quot;; import SystemIndex from &quot;../views/sys/SystemIndex&quot;; import SystemUsers from &quot;../views/sys/SystemUsers&quot;; import SystemBlogs from &quot;../views/sys/SystemBlogs&quot;; import SystemBooks from &quot;../views/sys/SystemBooks&quot;; import SystemDeleted from &quot;../views/sys/SystemDeleted&quot;; import Cooperate from &quot;@/views/Cooperate&quot;; import VueRouter from &#39;vue-router&#39; Vue.use(VueRouter) const routes = [ { path: &#39;/sys&#39;, // name: &#39;System&#39;, component: System, children: [ { path: &#39;/&#39;, name: &#39;SystemIndex&#39;, component: SystemIndex, title: &#39;访问统计&#39; }, { path: &#39;users&#39;, name: &#39;SystemUsers&#39;, component: SystemUsers, title: &#39;账号管理&#39; }, { path: &#39;blogs&#39;, name: &#39;SystemBlogs&#39;, component: SystemBlogs, title: &#39;日志管理&#39; }, { path: &#39;deleted&#39;, name: &#39;SystemDeleted&#39;, component: SystemDeleted, title: &#39;删除管理&#39; }, { path: &#39;books&#39;, name: &#39;SystemBooks&#39;, component: SystemBooks, title: &#39;下载书籍&#39; } ] }, { path: &#39;/resume&#39;, name: &#39;Resume&#39;, component: Resume, meta: { title: &#39;简历&#39; } }, { path: &#39;/cooperate/:blogId&#39;, name: Cooperate, component: Cooperate }, { path: &#39;/other/:flag&#39;, name: &#39;Resume&#39;, component: Resume, meta: { title: &#39;简历&#39; } }, { path: &#39;/footer&#39;, name: &#39;Footer&#39;, component: Footer }, { path: &#39;/intro&#39;, name: &#39;Intro&#39;, component: Intro, meta: { title: &#39;简介&#39; } }, // { // path: &#39;/update&#39;, // name: &#39;Update&#39;, // component: Update, // meta: { // title: &#39;更新日志&#39; // } // }, { path: &#39;/&#39;, name: &#39;Index&#39;, redirect: {name: &quot;Intro&quot;} }, { // path: &#39;/blogs&#39;, path: &#39;/blogs/:currentPage&#39;, name: &#39;Blogs&#39;, component: Blogs, meta: { title: &#39;博客列表&#39; } }, { path: &#39;/blogsAuthorized/:currentPage&#39;, name: &#39;blogsAuthorized&#39;, component: Blogs, meta: { title: &#39;博客列表&#39; } }, // { // // path: &#39;/blogsByYear/:year&#39;, // path: &#39;/blogsByYear/:year/:currentPage&#39;, // name: &#39;blogsByYear&#39;, // component: BlogsByYear, // meta: { // title: &#39;博客归档&#39; // } // }, { path: &#39;/blogsByYear/:year/:currentPage&#39;, name: &#39;blogsByYear&#39;, component: Blogs, meta: { title: &#39;博客归档&#39; } }, { path: &#39;/login&#39;, name: &#39;Login&#39;, component: Login, meta: { title: &#39;登录博客&#39; } }, { path: &#39;/login/:blogId&#39;, name: &#39;Login&#39;, component: Login, meta: { title: &#39;登录博客&#39; } }, { path: &#39;/blog/add&#39;, name: &#39;BlogAdd&#39;, component: BlogEdit, meta: { requireAuth: true, title: &#39;新建博客&#39; } }, { path: &#39;/blog/:blogId&#39;, name: &#39;BlogDetail&#39;, component: BlogDetail, }, { path: &#39;/blog/:blogId/edit&#39;, name: &#39;BlogEdit&#39;, component: BlogEdit, meta: { requireAuth: true, title: &#39;编辑博客&#39; } }, ] const router = new VueRouter({ mode: &#39;history&#39;, base: process.env.BASE_URL, routes, // scrollBehavior (to, from, savedPosition) { // return { x: 0, y: 0 } // } }) export default router 2.3 vuex import Vue from &#39;vue&#39; import Vuex from &#39;vuex&#39; Vue.use(Vuex) export default { state: { menuList: [], editableTabsValue: &#39;SystemIndex&#39;, editableTabs: [{ title: &#39;首页&#39;, name: &#39;SystemIndex&#39;, }] }, mutations: { setMenuList(state, menus) { state.menuList = menus }, addTab(state, tab) { let index = state.editableTabs.findIndex(e =&gt; e.name === tab.name) if (index === -1) { state.editableTabs.push({ title: tab.title, name: tab.name, }); } state.editableTabsValue = tab.name; }, resetState: (state) =&gt; { state.menuList = [] state.editableTabsValue = &#39;SystemIndex&#39; state.editableTabs = [{ title: &#39;首页&#39;, name: &#39;SystemIndex&#39;, }] } }, actions: {}, } import Vue from &#39;vue&#39; import Vuex from &#39;vuex&#39; import menus from &quot;./modules/menus&quot; Vue.use(Vuex) export default new Vuex.Store({ state: { myToken: &#39;&#39;, myUserInfo: JSON.parse(sessionStorage.getItem(&quot;myUserInfo&quot;)), }, mutations: { // set SET_TOKEN: (state, token) =&gt; { state.myToken = token sessionStorage.setItem(&quot;myToken&quot;, token) } , SET_USERINFO: (state, userInfo) =&gt; { state.myUserInfo = userInfo sessionStorage.setItem(&quot;myUserInfo&quot;, JSON.stringify(userInfo)) }, REMOVE_INFO: (state) =&gt; { state.myToken = &#39;&#39; state.myUserInfo = {} sessionStorage.setItem(&quot;myToken&quot;, &#39;&#39;) sessionStorage.setItem(&quot;myUserInfo&quot;, JSON.stringify(&#39;&#39;)) } }, getters: { // get getUser: state =&gt; { return state.myUserInfo } }, actions: { }, modules: { menus } }) 2.4 other &lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;router-view/&gt; &lt;Footer&gt;&lt;/Footer&gt; &lt;/div&gt; &lt;/template&gt; &lt;style&gt; #app { max-width: 960px; margin: 0 auto; } &lt;/style&gt; &lt;script&gt; import Footer from &quot;@/components/Footer&quot;; export default { components: {Footer} } &lt;/script&gt; 2.5 axios import axios from &#39;axios&#39; import Element from &#39;element-ui&#39; import store from &#39;./store&#39; import router from &#39;./router&#39; axios.defaults.baseURL = &quot;http://localhost:8081&quot; // axios.defaults.baseURL = &quot;http://119.91.233.182:8081&quot; const request = axios.create({ timeout: 5000 }) // 前置拦截 request.interceptors.request.use(config =&gt; { return config }) request.interceptors.response.use(response =&gt; { let res = response.data; // console.log(&quot;=================&quot;) // console.log(res) // console.log(&quot;=================&quot;) // if (res.code === 400) { // store.commit(&quot;REMOVE_INFO&quot;) // router.push(&quot;/login&quot;) // } if (res.code === 200) { return response } else { Element.Message.error(response.data.msg, {duration: 3 * 1000}) return Promise.reject(response.data.msg) } }, error =&gt; { console.log(error) if(error.response.data.msg) { error.message = error.response.data.msg Element.Message.error(error.message, {duration: 3 * 1000}) return Promise.reject(error) } console.log(error.response) //RestControllerAdvice只能捕获Controller里抛出的异常， //由于token过期是在filter抛出的，会导致全局异常处理器捕获不到 if(error.response.status === 500) { store.commit(&quot;REMOVE_INFO&quot;) router.push(&quot;/login&quot;) } if (error.response.status === 401) { store.commit(&quot;REMOVE_INFO&quot;) router.push(&quot;/login&quot;) } Element.Message.error(error.response.data.substring(560, 574), {duration: 3 * 1000}) return Promise.reject(error) } ) export default request 2.6 main import Vue from &#39;vue&#39; import App from &#39;./App.vue&#39; import store from &#39;./store&#39; import Element from &#39;element-ui&#39; import axios from &#39;./axios&#39; import &#39;highlight.js/styles/atom-one-light.css&#39; //样式 import mavonEditor from &#39;mavon-editor&#39; import &quot;element-ui/lib/theme-chalk/index.css&quot; import &#39;mavon-editor/dist/css/index.css&#39; // import &quot;./axios&quot; import &quot;./permission&quot; import router from &#39;./router&#39; Vue.use(Element) Vue.use(mavonEditor) Vue.config.productionTip = false Vue.prototype.$axios = axios //标题 router.beforeEach((to, from, next) =&gt; { /* 路由发生变化修改页面title */ if (to.meta.title) { document.title = to.meta.title } next() }) new Vue({ router, store, render: h =&gt; h(App) }).$mount(&#39;#app&#39;) 2.7 permission import router from &quot;./router&quot;; // 路由判断登录 根据路由配置文件的参数 router.beforeEach((to, from, next) =&gt; { if (to.matched.some(record =&gt; record.meta.requireAuth)) { // 判断该路由是否需要登录权限 const token = sessionStorage.getItem(&quot;myToken&quot;) // console.log(&quot;------------&quot; + token) if (token) { // 判断当前的token是否存在 ； 登录存入的token if (to.path === &#39;/login&#39;) { } else { next() } } else { next({ path: &#39;/login&#39; }) } } else { next() } }) "],["references.html", "参考文献", " 参考文献 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
